
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002860  08002860  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000084  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000903d  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000199d  00000000  00000000  000290cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f63  00000000  00000000  0002b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca55  00000000  00000000  0005184b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b85  00000000  00000000  0005e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fe25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c5c  00000000  00000000  0013fe78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002670 	.word	0x08002670

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	08002670 	.word	0x08002670

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <debounceFSM_init>:
/**
 * @brief  Initialized FSM
 * @param  None
 * @retval None
 */
void debounceFSM_init(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 8000504:	2128      	movs	r1, #40	; 0x28
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <debounceFSM_init+0x1c>)
 8000508:	f000 f89c 	bl	8000644 <delayInit>
	current_state = BUTTON_UP;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <debounceFSM_init+0x20>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
	pressed = false;
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <debounceFSM_init+0x24>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000007c 	.word	0x2000007c
 8000520:	20000088 	.word	0x20000088
 8000524:	20000089 	.word	0x20000089

08000528 <debounceFSM_update>:
/**
 * @brief  Updated FSM
 * @param  None
 * @retval None
 */
void debounceFSM_update(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	switch (current_state) {
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <debounceFSM_update+0xcc>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d853      	bhi.n	80005dc <debounceFSM_update+0xb4>
 8000534:	a201      	add	r2, pc, #4	; (adr r2, 800053c <debounceFSM_update+0x14>)
 8000536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053a:	bf00      	nop
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000569 	.word	0x08000569
 8000544:	08000595 	.word	0x08000595
 8000548:	080005b1 	.word	0x080005b1
	case BUTTON_UP:
		if(BSP_PB_GetState(BUTTON_USER)){
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fa5f 	bl	8000a10 <BSP_PB_GetState>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d044      	beq.n	80005e2 <debounceFSM_update+0xba>
			delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 8000558:	2128      	movs	r1, #40	; 0x28
 800055a:	4827      	ldr	r0, [pc, #156]	; (80005f8 <debounceFSM_update+0xd0>)
 800055c:	f000 f872 	bl	8000644 <delayInit>
			current_state = BUTTON_FALLING;
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <debounceFSM_update+0xcc>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000566:	e03c      	b.n	80005e2 <debounceFSM_update+0xba>
	case BUTTON_FALLING:
		if (delayRead(&delay_BUTTON)){
 8000568:	4823      	ldr	r0, [pc, #140]	; (80005f8 <debounceFSM_update+0xd0>)
 800056a:	f000 f887 	bl	800067c <delayRead>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d038      	beq.n	80005e6 <debounceFSM_update+0xbe>
			if(BSP_PB_GetState(BUTTON_USER)){
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fa4b 	bl	8000a10 <BSP_PB_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <debounceFSM_update+0x64>
				current_state = BUTTON_DOWN;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <debounceFSM_update+0xcc>)
 8000582:	2202      	movs	r2, #2
 8000584:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000586:	f000 f839 	bl	80005fc <buttonPressed>
			}else{
				current_state = BUTTON_UP;
			}
		}
		break;
 800058a:	e02c      	b.n	80005e6 <debounceFSM_update+0xbe>
				current_state = BUTTON_UP;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <debounceFSM_update+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		break;
 8000592:	e028      	b.n	80005e6 <debounceFSM_update+0xbe>
	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER)){
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fa3b 	bl	8000a10 <BSP_PB_GetState>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d124      	bne.n	80005ea <debounceFSM_update+0xc2>
			delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 80005a0:	2128      	movs	r1, #40	; 0x28
 80005a2:	4815      	ldr	r0, [pc, #84]	; (80005f8 <debounceFSM_update+0xd0>)
 80005a4:	f000 f84e 	bl	8000644 <delayInit>
			current_state = BUTTON_RAISING;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <debounceFSM_update+0xcc>)
 80005aa:	2203      	movs	r2, #3
 80005ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005ae:	e01c      	b.n	80005ea <debounceFSM_update+0xc2>
	case BUTTON_RAISING:
		if (delayRead(&delay_BUTTON)){
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <debounceFSM_update+0xd0>)
 80005b2:	f000 f863 	bl	800067c <delayRead>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d018      	beq.n	80005ee <debounceFSM_update+0xc6>
			if(BSP_PB_GetState(BUTTON_USER)){
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa27 	bl	8000a10 <BSP_PB_GetState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <debounceFSM_update+0xa8>
				current_state = BUTTON_DOWN;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <debounceFSM_update+0xcc>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	701a      	strb	r2, [r3, #0]
			}else{
				current_state = BUTTON_UP;
				buttonReleased();
			}
		}
		break;
 80005ce:	e00e      	b.n	80005ee <debounceFSM_update+0xc6>
				current_state = BUTTON_UP;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <debounceFSM_update+0xcc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 80005d6:	f000 f81d 	bl	8000614 <buttonReleased>
		break;
 80005da:	e008      	b.n	80005ee <debounceFSM_update+0xc6>
	default:
		debounceFSM_init();
 80005dc:	f7ff ff90 	bl	8000500 <debounceFSM_init>
		break;
 80005e0:	e006      	b.n	80005f0 <debounceFSM_update+0xc8>
		break;
 80005e2:	bf00      	nop
 80005e4:	e004      	b.n	80005f0 <debounceFSM_update+0xc8>
		break;
 80005e6:	bf00      	nop
 80005e8:	e002      	b.n	80005f0 <debounceFSM_update+0xc8>
		break;
 80005ea:	bf00      	nop
 80005ec:	e000      	b.n	80005f0 <debounceFSM_update+0xc8>
		break;
 80005ee:	bf00      	nop
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000088 	.word	0x20000088
 80005f8:	2000007c 	.word	0x2000007c

080005fc <buttonPressed>:
/**
 * @brief  Button User pressed
 * @param  None
 * @retval None
 */
void buttonPressed(){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	pressed = true;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <buttonPressed+0x14>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20000089 	.word	0x20000089

08000614 <buttonReleased>:
/**
 * @brief  Button User released
 * @param  None
 * @retval None
 */
void buttonReleased(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	pressed = false;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <buttonReleased+0x14>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	20000089 	.word	0x20000089

0800062c <readKey>:
/**
 * @brief  Read key
 * @param  None
 * @retval None
 */
bool readKey(){
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	return pressed;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <readKey+0x14>)
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000089 	.word	0x20000089

08000644 <delayInit>:
 * @brief  Initializes the led delays
 * @param  delay: delay to be initialized.
 * @param  duration: duration in milliseconds of the delay
 * @retval None
 */
void delayInit(delay_t *delay, tick_t duration) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d105      	bne.n	8000660 <delayInit+0x1c>
		delay->startTime = HAL_GetTick();
 8000654:	f000 fab6 	bl	8000bc4 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
		return;
 800065e:	e00a      	b.n	8000676 <delayInit+0x32>
	} else {
		delay->duration = duration;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 800066c:	f000 faaa 	bl	8000bc4 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
	}
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <delayRead>:
 * been fulfilled or not. Returns a boolean value indicating
 * whether or not the time has expired.
 * @param  delay: delay to be checked.
 * @retval bool_t: value indicating whether the time has expired or not.
 */
bool_t delayRead(delay_t *delay) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <delayRead+0x12>
		return false;
 800068a:	2300      	movs	r3, #0
 800068c:	e01f      	b.n	80006ce <delayRead+0x52>
	} else {
		if (delay->running) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7a1b      	ldrb	r3, [r3, #8]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d012      	beq.n	80006bc <delayRead+0x40>
			if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000696:	f000 fa95 	bl	8000bc4 <HAL_GetTick>
 800069a:	4602      	mov	r2, r0
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d306      	bcc.n	80006b8 <delayRead+0x3c>
				delay->startTime = HAL_GetTick();
 80006aa:	f000 fa8b 	bl	8000bc4 <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
				return true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e00a      	b.n	80006ce <delayRead+0x52>
			} else {
				return false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e008      	b.n	80006ce <delayRead+0x52>
			}
		} else {
			delay->startTime = HAL_GetTick();
 80006bc:	f000 fa82 	bl	8000bc4 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2201      	movs	r2, #1
 80006ca:	721a      	strb	r2, [r3, #8]
			return false;
 80006cc:	2300      	movs	r3, #0
		}
	}
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <delayWrite>:
 * of an existing delay.
 * @param  delay: delay to be modificated.
 * @param  duration: duration in milliseconds of the delay
 * @retval None
 */
void delayWrite(delay_t *delay, tick_t duration) {
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <delayWrite+0x18>
		return;
	} else {
		delay->duration = duration;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	e000      	b.n	80006f0 <delayWrite+0x1a>
		return;
 80006ee:	bf00      	nop
	}
}
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <uartinit>:
static const char * UART_CONFIG_M09 = "UART OverSampling: UART_OVERSAMPLING_16\n\r";
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/
bool uartinit() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance = USARTx;
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <uartinit+0xa8>)
 8000702:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <uartinit+0xac>)
 8000704:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = 9600;
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <uartinit+0xa8>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <uartinit+0xa8>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <uartinit+0xa8>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <uartinit+0xa8>)
 800071c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000720:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <uartinit+0xa8>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <uartinit+0xa8>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <uartinit+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <uartinit+0xa8>)
 8000736:	f001 fa9d 	bl	8001c74 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <uartinit+0x48>
		return false;
 8000740:	2300      	movs	r3, #0
 8000742:	e02d      	b.n	80007a0 <uartinit+0xa4>
	}

	/* Output a message on Hyperterminal using printf function */
	uartsendString((uint8_t *)UART_CONFIG_M01);
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <uartinit+0xb0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f841 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M02);
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <uartinit+0xb4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f83c 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M03);
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <uartinit+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f837 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M04);
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <uartinit+0xbc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f832 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M05);
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <uartinit+0xc0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f82d 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M06);
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <uartinit+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f828 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M07);
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <uartinit+0xc8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f823 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M08);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <uartinit+0xcc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f81e 	bl	80007d0 <uartsendString>
	uartsendString((uint8_t *)UART_CONFIG_M09);
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <uartinit+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f819 	bl	80007d0 <uartsendString>

	return true;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40004800 	.word	0x40004800
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000008 	.word	0x20000008
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	20000010 	.word	0x20000010
 80007c0:	20000014 	.word	0x20000014
 80007c4:	20000018 	.word	0x20000018
 80007c8:	2000001c 	.word	0x2000001c
 80007cc:	20000020 	.word	0x20000020

080007d0 <uartsendString>:

void uartsendString(uint8_t *pstring) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (pstring == NULL)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <uartsendString+0x2c>
		return;

	uint16_t str_long = strlen((const char*) pstring);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fd04 	bl	80001ec <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	81fb      	strh	r3, [r7, #14]
	if (str_long > 0) {
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d007      	beq.n	80007fe <uartsendString+0x2e>
		HAL_UART_Transmit(&UartHandle, pstring, str_long, UART_TX_TIMEOUT);
 80007ee:	89fa      	ldrh	r2, [r7, #14]
 80007f0:	23c8      	movs	r3, #200	; 0xc8
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <uartsendString+0x34>)
 80007f6:	f001 fa8a 	bl	8001d0e <HAL_UART_Transmit>
 80007fa:	e000      	b.n	80007fe <uartsendString+0x2e>
		return;
 80007fc:	bf00      	nop
	}
}
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000008c 	.word	0x2000008c

08000808 <uartSendStringSize>:

void uartSendStringSize(uint8_t * pstring, uint16_t size){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
	if (pstring == NULL) return;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d017      	beq.n	800084a <uartSendStringSize+0x42>
	if (size == 0) return;
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d016      	beq.n	800084e <uartSendStringSize+0x46>

	uint16_t str_long = strlen((const char*) pstring);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fce3 	bl	80001ec <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	81fb      	strh	r3, [r7, #14]

	if (str_long > 0) {
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00f      	beq.n	8000850 <uartSendStringSize+0x48>
		if(size<str_long) str_long = size; //Como maximo mando el largo de la cadena.
 8000830:	887a      	ldrh	r2, [r7, #2]
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	429a      	cmp	r2, r3
 8000836:	d201      	bcs.n	800083c <uartSendStringSize+0x34>
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Transmit(&UartHandle, pstring, str_long, UART_TX_TIMEOUT);
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	23c8      	movs	r3, #200	; 0xc8
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <uartSendStringSize+0x50>)
 8000844:	f001 fa63 	bl	8001d0e <HAL_UART_Transmit>
 8000848:	e002      	b.n	8000850 <uartSendStringSize+0x48>
	if (pstring == NULL) return;
 800084a:	bf00      	nop
 800084c:	e000      	b.n	8000850 <uartSendStringSize+0x48>
	if (size == 0) return;
 800084e:	bf00      	nop
	}
}
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000008c 	.word	0x2000008c

0800085c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10e      	bne.n	800088a <BSP_LED_Init+0x2e>
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <BSP_LED_Init+0x94>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <BSP_LED_Init+0x94>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	6313      	str	r3, [r2, #48]	; 0x30
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <BSP_LED_Init+0x94>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	e00d      	b.n	80008a6 <BSP_LED_Init+0x4a>
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <BSP_LED_Init+0x94>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <BSP_LED_Init+0x94>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <BSP_LED_Init+0x94>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <BSP_LED_Init+0x98>)
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <BSP_LED_Init+0x9c>)
 80008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c4:	f107 0214 	add.w	r2, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa98 	bl	8000e00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <BSP_LED_Init+0x9c>)
 80008d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <BSP_LED_Init+0x98>)
 80008dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 fc50 	bl	8001188 <HAL_GPIO_WritePin>
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	08002838 	.word	0x08002838
 80008f8:	20000024 	.word	0x20000024

080008fc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <BSP_LED_On+0x2c>)
 800090a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <BSP_LED_On+0x30>)
 8000912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000916:	2201      	movs	r2, #1
 8000918:	4619      	mov	r1, r3
 800091a:	f000 fc35 	bl	8001188 <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000024 	.word	0x20000024
 800092c:	08002838 	.word	0x08002838

08000930 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <BSP_LED_Toggle+0x2c>)
 800093e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <BSP_LED_Toggle+0x30>)
 8000946:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800094a:	4619      	mov	r1, r3
 800094c:	4610      	mov	r0, r2
 800094e:	f000 fc34 	bl	80011ba <HAL_GPIO_TogglePin>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000024 	.word	0x20000024
 8000960:	08002838 	.word	0x08002838

08000964 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <BSP_PB_Init+0xa4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <BSP_PB_Init+0xa4>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <BSP_PB_Init+0xa4>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d112      	bne.n	80009bc <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <BSP_PB_Init+0xa8>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fa22 	bl	8000e00 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d11d      	bne.n	80009fe <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80009cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <BSP_PB_Init+0xa8>)
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fa0d 	bl	8000e00 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009e6:	2328      	movs	r3, #40	; 0x28
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f9cf 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009f4:	2328      	movs	r3, #40	; 0x28
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f9e6 	bl	8000dca <HAL_NVIC_EnableIRQ>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	20000030 	.word	0x20000030

08000a10 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <BSP_PB_GetState+0x28>)
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fb95 	bl	8001158 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000030 	.word	0x20000030

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <SystemInit+0x60>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <SystemInit+0x60>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <SystemInit+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <SystemInit+0x64>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <SystemInit+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <SystemInit+0x64>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <SystemInit+0x64>)
 8000a68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <SystemInit+0x64>)
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <SystemInit+0x68>)
 8000a76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <SystemInit+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <SystemInit+0x64>)
 8000a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SystemInit+0x60>)
 8000a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a90:	609a      	str	r2, [r3, #8]
#endif
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	24003010 	.word	0x24003010

08000aa8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000afc:	f000 f84e 	bl	8000b9c <HAL_IncTick>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x34>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x34>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x34>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x34>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f92b 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f000 fbb2 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f943 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f90b 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000034 	.word	0x20000034
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	20000038 	.word	0x20000038

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000003c 	.word	0x2000003c
 8000bc0:	200000d0 	.word	0x200000d0

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000d0 	.word	0x200000d0

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e177      	b.n	800110c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8166 	bne.w	8001106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80c0 	beq.w	8001106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a65      	ldr	r2, [pc, #404]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a61      	ldr	r2, [pc, #388]	; (8001128 <HAL_GPIO_Init+0x328>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a58      	ldr	r2, [pc, #352]	; (800112c <HAL_GPIO_Init+0x32c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d037      	beq.n	800103e <HAL_GPIO_Init+0x23e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a57      	ldr	r2, [pc, #348]	; (8001130 <HAL_GPIO_Init+0x330>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d031      	beq.n	800103a <HAL_GPIO_Init+0x23a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a56      	ldr	r2, [pc, #344]	; (8001134 <HAL_GPIO_Init+0x334>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x236>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a55      	ldr	r2, [pc, #340]	; (8001138 <HAL_GPIO_Init+0x338>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x232>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a54      	ldr	r2, [pc, #336]	; (800113c <HAL_GPIO_Init+0x33c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x22e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a53      	ldr	r2, [pc, #332]	; (8001140 <HAL_GPIO_Init+0x340>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x22a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x344>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x348>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x34c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x350>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x21a>
 8001016:	2309      	movs	r3, #9
 8001018:	e012      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800101a:	230a      	movs	r3, #10
 800101c:	e010      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800101e:	2308      	movs	r3, #8
 8001020:	e00e      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001022:	2307      	movs	r3, #7
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x328>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a34      	ldr	r2, [pc, #208]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x354>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae84 	bls.w	8000e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40022000 	.word	0x40022000
 8001150:	40022400 	.word	0x40022400
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011cc:	887a      	ldrh	r2, [r7, #2]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	041a      	lsls	r2, r3, #16
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	400b      	ands	r3, r1
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_UART_MspInit+0x9c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_UART_MspInit+0x9c>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_UART_MspInit+0x9c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_UART_MspInit+0x9c>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_UART_MspInit+0x9c>)
 800123a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <HAL_UART_MspInit+0xa0>)
 800126a:	f7ff fdc9 	bl	8000e00 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001274:	2307      	movs	r3, #7
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <HAL_UART_MspInit+0xa0>)
 8001280:	f7ff fdbe 	bl	8000e00 <HAL_GPIO_Init>
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020c00 	.word	0x40020c00

08001294 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_PWREx_EnableOverDrive+0x90>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_PWREx_EnableOverDrive+0x90>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_PWREx_EnableOverDrive+0x94>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff fc78 	bl	8000bc4 <HAL_GetTick>
 80012d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d6:	e009      	b.n	80012ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012d8:	f7ff fc74 	bl	8000bc4 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e6:	d901      	bls.n	80012ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e01f      	b.n	800132c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_PWREx_EnableOverDrive+0x98>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d1ee      	bne.n	80012d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff fc60 	bl	8000bc4 <HAL_GetTick>
 8001304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001306:	e009      	b.n	800131c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001308:	f7ff fc5c 	bl	8000bc4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001316:	d901      	bls.n	800131c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e007      	b.n	800132c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_PWREx_EnableOverDrive+0x98>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001328:	d1ee      	bne.n	8001308 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	420e0040 	.word	0x420e0040
 800133c:	40007000 	.word	0x40007000
 8001340:	420e0044 	.word	0x420e0044

08001344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e267      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d075      	beq.n	800144e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d00c      	beq.n	8001388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d112      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4b82      	ldr	r3, [pc, #520]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001386:	d10b      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	4b7e      	ldr	r3, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d05b      	beq.n	800144c <HAL_RCC_OscConfig+0x108>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d157      	bne.n	800144c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e242      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d106      	bne.n	80013b8 <HAL_RCC_OscConfig+0x74>
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a75      	ldr	r2, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b70      	ldr	r3, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6f      	ldr	r2, [pc, #444]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6c      	ldr	r2, [pc, #432]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013dc:	4b69      	ldr	r3, [pc, #420]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a68      	ldr	r2, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a65      	ldr	r2, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fbe2 	bl	8000bc4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fbde 	bl	8000bc4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e207      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xc0>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fbce 	bl	8000bc4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fbca 	bl	8000bc4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1f3      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0xe8>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1c7      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4937      	ldr	r1, [pc, #220]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_OscConfig+0x244>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb83 	bl	8000bc4 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fb7f 	bl	8000bc4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1a8      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4925      	ldr	r1, [pc, #148]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x244>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb62 	bl	8000bc4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fb5e 	bl	8000bc4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e187      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d036      	beq.n	800159c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d016      	beq.n	8001564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x248>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fb42 	bl	8000bc4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fb3e 	bl	8000bc4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e167      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x200>
 8001562:	e01b      	b.n	800159c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x248>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fb2b 	bl	8000bc4 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	e00e      	b.n	8001590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fb27 	bl	8000bc4 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d907      	bls.n	8001590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e150      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	42470000 	.word	0x42470000
 800158c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ea      	bne.n	8001572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8097 	beq.w	80016d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b77      	ldr	r3, [pc, #476]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e6:	4b74      	ldr	r3, [pc, #464]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a73      	ldr	r2, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fae7 	bl	8000bc4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fa:	f7ff fae3 	bl	8000bc4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e10c      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x2ea>
 8001620:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	e01c      	b.n	8001668 <HAL_RCC_OscConfig+0x324>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x30c>
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6713      	str	r3, [r2, #112]	; 0x70
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0x324>
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a54      	ldr	r2, [pc, #336]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d015      	beq.n	800169c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff faa8 	bl	8000bc4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff faa4 	bl	8000bc4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0cb      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0ee      	beq.n	8001678 <HAL_RCC_OscConfig+0x334>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa92 	bl	8000bc4 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff fa8e 	bl	8000bc4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0b5      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a38      	ldr	r2, [pc, #224]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a1 	beq.w	8001824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d05c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d141      	bne.n	800177a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa62 	bl	8000bc4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fa5e 	bl	8000bc4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e087      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	3b01      	subs	r3, #1
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	491b      	ldr	r1, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fa37 	bl	8000bc4 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fa33 	bl	8000bc4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e05c      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x416>
 8001778:	e054      	b.n	8001824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fa20 	bl	8000bc4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fa1c 	bl	8000bc4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e045      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x444>
 80017a6:	e03d      	b.n	8001824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e038      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000
 80017bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x4ec>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d028      	beq.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d121      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11a      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d111      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0cc      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d90c      	bls.n	8001870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b65      	ldr	r3, [pc, #404]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0b8      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	494d      	ldr	r1, [pc, #308]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d044      	beq.n	8001954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d119      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e067      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 0203 	bic.w	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4934      	ldr	r1, [pc, #208]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	4313      	orrs	r3, r2
 8001922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001924:	f7ff f94e 	bl	8000bc4 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	e00a      	b.n	8001942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff f94a 	bl	8000bc4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e04f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 020c 	and.w	r2, r3, #12
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d1eb      	bne.n	800192c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d20c      	bcs.n	800197c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e032      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4916      	ldr	r1, [pc, #88]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ba:	f000 f821 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	5ccb      	ldrb	r3, [r1, r3]
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f8ae 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08002840 	.word	0x08002840
 80019f8:	20000034 	.word	0x20000034
 80019fc:	20000038 	.word	0x20000038

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b094      	sub	sp, #80	; 0x50
 8001a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d00d      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x40>
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	f200 80e1 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a32:	e0db      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a38:	e0db      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a3e:	e0d8      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d063      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a72:	4622      	mov	r2, r4
 8001a74:	462b      	mov	r3, r5
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	1a51      	subs	r1, r2, r1
 8001a8e:	6139      	str	r1, [r7, #16]
 8001a90:	4629      	mov	r1, r5
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aa4:	4659      	mov	r1, fp
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aae:	4651      	mov	r1, sl
 8001ab0:	018a      	lsls	r2, r1, #6
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab8:	4659      	mov	r1, fp
 8001aba:	eb63 0901 	sbc.w	r9, r3, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	eb18 0303 	adds.w	r3, r8, r3
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	462b      	mov	r3, r5
 8001ae0:	eb49 0303 	adc.w	r3, r9, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001af2:	4629      	mov	r1, r5
 8001af4:	024b      	lsls	r3, r1, #9
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001afc:	4621      	mov	r1, r4
 8001afe:	024a      	lsls	r2, r1, #9
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b10:	f7fe fb74 	bl	80001fc <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b1c:	e058      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	4611      	mov	r1, r2
 8001b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b38:	4642      	mov	r2, r8
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	0159      	lsls	r1, r3, #5
 8001b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4a:	0150      	lsls	r0, r2, #5
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4641      	mov	r1, r8
 8001b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b56:	4649      	mov	r1, r9
 8001b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b70:	ebb2 040a 	subs.w	r4, r2, sl
 8001b74:	eb63 050b 	sbc.w	r5, r3, fp
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	00eb      	lsls	r3, r5, #3
 8001b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b86:	00e2      	lsls	r2, r4, #3
 8001b88:	4614      	mov	r4, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	4643      	mov	r3, r8
 8001b8e:	18e3      	adds	r3, r4, r3
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	464b      	mov	r3, r9
 8001b94:	eb45 0303 	adc.w	r3, r5, r3
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	028b      	lsls	r3, r1, #10
 8001baa:	4621      	mov	r1, r4
 8001bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	028a      	lsls	r2, r1, #10
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	61fa      	str	r2, [r7, #28]
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fb1a 	bl	80001fc <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3750      	adds	r7, #80	; 0x50
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000034 	.word	0x20000034

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08002850 	.word	0x08002850

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffdc 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08002850 	.word	0x08002850

08001c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e03f      	b.n	8001d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff faa8 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	; 0x24
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f929 	bl	8001f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b08a      	sub	sp, #40	; 0x28
 8001d12:	af02      	add	r7, sp, #8
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d17c      	bne.n	8001e28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_UART_Transmit+0x2c>
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e075      	b.n	8001e2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_UART_Transmit+0x3e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e06e      	b.n	8001e2a <HAL_UART_Transmit+0x11c>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2221      	movs	r2, #33	; 0x21
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d62:	f7fe ff2f 	bl	8000bc4 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	88fa      	ldrh	r2, [r7, #6]
 8001d6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	88fa      	ldrh	r2, [r7, #6]
 8001d72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7c:	d108      	bne.n	8001d90 <HAL_UART_Transmit+0x82>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	e003      	b.n	8001d98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001da0:	e02a      	b.n	8001df8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f840 	bl	8001e32 <UART_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e036      	b.n	8001e2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10b      	bne.n	8001dda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	e007      	b.n	8001dea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3301      	adds	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1cf      	bne.n	8001da2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f810 	bl	8001e32 <UART_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e006      	b.n	8001e2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b090      	sub	sp, #64	; 0x40
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e42:	e050      	b.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4a:	d04c      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e52:	f7fe feb7 	bl	8000bc4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d241      	bcs.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	e853 3f00 	ldrex	r3, [r3]
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e82:	637a      	str	r2, [r7, #52]	; 0x34
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e8a:	e841 2300 	strex	r3, r2, [r1]
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e5      	bne.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	e853 3f00 	ldrex	r3, [r3]
 8001ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3314      	adds	r3, #20
 8001eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eb6:	623a      	str	r2, [r7, #32]
 8001eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eba:	69f9      	ldr	r1, [r7, #28]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	e841 2300 	strex	r3, r2, [r1]
 8001ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1e5      	bne.n	8001e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e00f      	b.n	8001f06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d09f      	beq.n	8001e44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3740      	adds	r7, #64	; 0x40
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f14:	b0c0      	sub	sp, #256	; 0x100
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	ea40 0301 	orr.w	r3, r0, r1
 8001f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f68:	f021 010c 	bic.w	r1, r1, #12
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f76:	430b      	orrs	r3, r1
 8001f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8a:	6999      	ldr	r1, [r3, #24]
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	ea40 0301 	orr.w	r3, r0, r1
 8001f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b8f      	ldr	r3, [pc, #572]	; (80021dc <UART_SetConfig+0x2cc>)
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d005      	beq.n	8001fb0 <UART_SetConfig+0xa0>
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <UART_SetConfig+0x2d0>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d104      	bne.n	8001fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fb0:	f7ff fe4c 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8001fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fb8:	e003      	b.n	8001fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fba:	f7ff fe33 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8001fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fcc:	f040 810c 	bne.w	80021e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fea:	415b      	adcs	r3, r3
 8001fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	eb12 0801 	adds.w	r8, r2, r1
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	eb43 0901 	adc.w	r9, r3, r1
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800200e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002012:	4690      	mov	r8, r2
 8002014:	4699      	mov	r9, r3
 8002016:	4623      	mov	r3, r4
 8002018:	eb18 0303 	adds.w	r3, r8, r3
 800201c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002020:	462b      	mov	r3, r5
 8002022:	eb49 0303 	adc.w	r3, r9, r3
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800203a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800203e:	460b      	mov	r3, r1
 8002040:	18db      	adds	r3, r3, r3
 8002042:	653b      	str	r3, [r7, #80]	; 0x50
 8002044:	4613      	mov	r3, r2
 8002046:	eb42 0303 	adc.w	r3, r2, r3
 800204a:	657b      	str	r3, [r7, #84]	; 0x54
 800204c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002054:	f7fe f8d2 	bl	80001fc <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <UART_SetConfig+0x2d4>)
 800205e:	fba3 2302 	umull	r2, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	011c      	lsls	r4, r3, #4
 8002066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	1891      	adds	r1, r2, r2
 800207e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002080:	415b      	adcs	r3, r3
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002088:	4641      	mov	r1, r8
 800208a:	eb12 0a01 	adds.w	sl, r2, r1
 800208e:	4649      	mov	r1, r9
 8002090:	eb43 0b01 	adc.w	fp, r3, r1
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a8:	4692      	mov	sl, r2
 80020aa:	469b      	mov	fp, r3
 80020ac:	4643      	mov	r3, r8
 80020ae:	eb1a 0303 	adds.w	r3, sl, r3
 80020b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb4b 0303 	adc.w	r3, fp, r3
 80020bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020d4:	460b      	mov	r3, r1
 80020d6:	18db      	adds	r3, r3, r3
 80020d8:	643b      	str	r3, [r7, #64]	; 0x40
 80020da:	4613      	mov	r3, r2
 80020dc:	eb42 0303 	adc.w	r3, r2, r3
 80020e0:	647b      	str	r3, [r7, #68]	; 0x44
 80020e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020ea:	f7fe f887 	bl	80001fc <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <UART_SetConfig+0x2d4>)
 80020f6:	fba3 2301 	umull	r2, r3, r3, r1
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2264      	movs	r2, #100	; 0x64
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	1acb      	subs	r3, r1, r3
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <UART_SetConfig+0x2d4>)
 800210c:	fba3 2302 	umull	r2, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002118:	441c      	add	r4, r3
 800211a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800212c:	4642      	mov	r2, r8
 800212e:	464b      	mov	r3, r9
 8002130:	1891      	adds	r1, r2, r2
 8002132:	63b9      	str	r1, [r7, #56]	; 0x38
 8002134:	415b      	adcs	r3, r3
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800213c:	4641      	mov	r1, r8
 800213e:	1851      	adds	r1, r2, r1
 8002140:	6339      	str	r1, [r7, #48]	; 0x30
 8002142:	4649      	mov	r1, r9
 8002144:	414b      	adcs	r3, r1
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002154:	4659      	mov	r1, fp
 8002156:	00cb      	lsls	r3, r1, #3
 8002158:	4651      	mov	r1, sl
 800215a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215e:	4651      	mov	r1, sl
 8002160:	00ca      	lsls	r2, r1, #3
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	4603      	mov	r3, r0
 8002168:	4642      	mov	r2, r8
 800216a:	189b      	adds	r3, r3, r2
 800216c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002170:	464b      	mov	r3, r9
 8002172:	460a      	mov	r2, r1
 8002174:	eb42 0303 	adc.w	r3, r2, r3
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800218c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002190:	460b      	mov	r3, r1
 8002192:	18db      	adds	r3, r3, r3
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
 8002196:	4613      	mov	r3, r2
 8002198:	eb42 0303 	adc.w	r3, r2, r3
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800219e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021a6:	f7fe f829 	bl	80001fc <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <UART_SetConfig+0x2d4>)
 80021b0:	fba3 1302 	umull	r1, r3, r3, r2
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	2164      	movs	r1, #100	; 0x64
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	3332      	adds	r3, #50	; 0x32
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <UART_SetConfig+0x2d4>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4422      	add	r2, r4
 80021d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021d8:	e105      	b.n	80023e6 <UART_SetConfig+0x4d6>
 80021da:	bf00      	nop
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ec:	2200      	movs	r2, #0
 80021ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021fa:	4642      	mov	r2, r8
 80021fc:	464b      	mov	r3, r9
 80021fe:	1891      	adds	r1, r2, r2
 8002200:	6239      	str	r1, [r7, #32]
 8002202:	415b      	adcs	r3, r3
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220a:	4641      	mov	r1, r8
 800220c:	1854      	adds	r4, r2, r1
 800220e:	4649      	mov	r1, r9
 8002210:	eb43 0501 	adc.w	r5, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4643      	mov	r3, r8
 800222a:	18e3      	adds	r3, r4, r3
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002230:	464b      	mov	r3, r9
 8002232:	eb45 0303 	adc.w	r3, r5, r3
 8002236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002256:	4629      	mov	r1, r5
 8002258:	008b      	lsls	r3, r1, #2
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002260:	4621      	mov	r1, r4
 8002262:	008a      	lsls	r2, r1, #2
 8002264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002268:	f7fd ffc8 	bl	80001fc <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <UART_SetConfig+0x4e4>)
 8002272:	fba3 2302 	umull	r2, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	011c      	lsls	r4, r3, #4
 800227a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	1891      	adds	r1, r2, r2
 8002292:	61b9      	str	r1, [r7, #24]
 8002294:	415b      	adcs	r3, r3
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229c:	4641      	mov	r1, r8
 800229e:	1851      	adds	r1, r2, r1
 80022a0:	6139      	str	r1, [r7, #16]
 80022a2:	4649      	mov	r1, r9
 80022a4:	414b      	adcs	r3, r1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b4:	4659      	mov	r1, fp
 80022b6:	00cb      	lsls	r3, r1, #3
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022be:	4651      	mov	r1, sl
 80022c0:	00ca      	lsls	r2, r1, #3
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	4642      	mov	r2, r8
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022d0:	464b      	mov	r3, r9
 80022d2:	460a      	mov	r2, r1
 80022d4:	eb42 0303 	adc.w	r3, r2, r3
 80022d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80022e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022f4:	4649      	mov	r1, r9
 80022f6:	008b      	lsls	r3, r1, #2
 80022f8:	4641      	mov	r1, r8
 80022fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022fe:	4641      	mov	r1, r8
 8002300:	008a      	lsls	r2, r1, #2
 8002302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002306:	f7fd ff79 	bl	80001fc <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <UART_SetConfig+0x4e4>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a34      	ldr	r2, [pc, #208]	; (80023f4 <UART_SetConfig+0x4e4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232e:	441c      	add	r4, r3
 8002330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002334:	2200      	movs	r2, #0
 8002336:	673b      	str	r3, [r7, #112]	; 0x70
 8002338:	677a      	str	r2, [r7, #116]	; 0x74
 800233a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800233e:	4642      	mov	r2, r8
 8002340:	464b      	mov	r3, r9
 8002342:	1891      	adds	r1, r2, r2
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	415b      	adcs	r3, r3
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800234e:	4641      	mov	r1, r8
 8002350:	1851      	adds	r1, r2, r1
 8002352:	6039      	str	r1, [r7, #0]
 8002354:	4649      	mov	r1, r9
 8002356:	414b      	adcs	r3, r1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002366:	4659      	mov	r1, fp
 8002368:	00cb      	lsls	r3, r1, #3
 800236a:	4651      	mov	r1, sl
 800236c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002370:	4651      	mov	r1, sl
 8002372:	00ca      	lsls	r2, r1, #3
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	4603      	mov	r3, r0
 800237a:	4642      	mov	r2, r8
 800237c:	189b      	adds	r3, r3, r2
 800237e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002380:	464b      	mov	r3, r9
 8002382:	460a      	mov	r2, r1
 8002384:	eb42 0303 	adc.w	r3, r2, r3
 8002388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	663b      	str	r3, [r7, #96]	; 0x60
 8002394:	667a      	str	r2, [r7, #100]	; 0x64
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023a2:	4649      	mov	r1, r9
 80023a4:	008b      	lsls	r3, r1, #2
 80023a6:	4641      	mov	r1, r8
 80023a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ac:	4641      	mov	r1, r8
 80023ae:	008a      	lsls	r2, r1, #2
 80023b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023b4:	f7fd ff22 	bl	80001fc <__aeabi_uldivmod>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <UART_SetConfig+0x4e4>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2164      	movs	r1, #100	; 0x64
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	3332      	adds	r3, #50	; 0x32
 80023d0:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <UART_SetConfig+0x4e4>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4422      	add	r2, r4
 80023e4:	609a      	str	r2, [r3, #8]
}
 80023e6:	bf00      	nop
 80023e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	51eb851f 	.word	0x51eb851f

080023f8 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */

int main(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 80023fe:	f7fe fb81 	bl	8000b04 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8002402:	f000 f87f 	bl	8002504 <SystemClock_Config>

	/* Initialize BSP Led for LED1,LED2,LED3 */
	BSP_LED_Init(LED1);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fa28 	bl	800085c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe fa25 	bl	800085c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8002412:	2002      	movs	r0, #2
 8002414:	f7fe fa22 	bl	800085c <BSP_LED_Init>

	/* Initialize delay for LED2 */
	delayInit(&delay_LED2, delays_LED2[0]);
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <main+0xec>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4832      	ldr	r0, [pc, #200]	; (80024e8 <main+0xf0>)
 8002420:	f7fe f910 	bl	8000644 <delayInit>

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002424:	2100      	movs	r1, #0
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe fa9c 	bl	8000964 <BSP_PB_Init>

	debounceFSM_init();
 800242c:	f7fe f868 	bl	8000500 <debounceFSM_init>

	uint8_t index = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	71fb      	strb	r3, [r7, #7]

	if(uartinit()){
 8002434:	f7fe f962 	bl	80006fc <uartinit>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <main+0x52>
		uartsendString((uint8_t *)UART_CONFIG_OK);
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <main+0xf4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f9c4 	bl	80007d0 <uartsendString>
 8002448:	e001      	b.n	800244e <main+0x56>
	}else{
		/* Initialization Error */
		Error_Handler();
 800244a:	f000 f8bd 	bl	80025c8 <Error_Handler>
	}

	/*Test de las funciones de la API*/
	char *cadena = "\n\rHOLA MIS AMIGOS";
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <main+0xf8>)
 8002450:	603b      	str	r3, [r7, #0]
	uartsendString((uint8_t *)cadena);			//Debe imprimir toda la cadena completa
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	f7fe f9bc 	bl	80007d0 <uartsendString>
	uartSendStringSize((uint8_t *)cadena, 6);	//Debe imprimir solamente "HOLA"
 8002458:	2106      	movs	r1, #6
 800245a:	6838      	ldr	r0, [r7, #0]
 800245c:	f7fe f9d4 	bl	8000808 <uartSendStringSize>
	uartSendStringSize((uint8_t *)cadena, 60);	//Debe imprimir solamente "\n\rHOLA MIS AMIGOS" no los 60 caracteres con basura.
 8002460:	213c      	movs	r1, #60	; 0x3c
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f7fe f9d0 	bl	8000808 <uartSendStringSize>

	/* Infinite loop */
	while (1) {
		debounceFSM_update();
 8002468:	f7fe f85e 	bl	8000528 <debounceFSM_update>

		buttonPressed_current = readKey();
 800246c:	f7fe f8de 	bl	800062c <readKey>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <main+0xfc>)
 8002476:	701a      	strb	r2, [r3, #0]
		if (buttonPressed_current != buttonPressed_old){
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <main+0xfc>)
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <main+0x100>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d025      	beq.n	80024d0 <main+0xd8>
			buttonPressed_old = buttonPressed_current;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <main+0xfc>)
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <main+0x100>)
 800248a:	701a      	strb	r2, [r3, #0]
			if (buttonPressed_current){
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <main+0xfc>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d018      	beq.n	80024c6 <main+0xce>
				uartsendString((uint8_t *)FLANCO_DESCENDENTE);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <main+0x104>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f999 	bl	80007d0 <uartsendString>
				index ++;
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	3301      	adds	r3, #1
 80024a2:	71fb      	strb	r3, [r7, #7]
				index = index % delay_sequence_elements;
 80024a4:	2205      	movs	r2, #5
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80024ac:	fb01 f202 	mul.w	r2, r1, r2
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
				delayWrite(&delay_LED2, delays_LED2[index]);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <main+0xec>)
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	4619      	mov	r1, r3
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <main+0xf0>)
 80024c0:	f7fe f909 	bl	80006d6 <delayWrite>
 80024c4:	e004      	b.n	80024d0 <main+0xd8>
			}else{
				uartsendString((uint8_t *)FLANCO_ASCENDENTE);
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <main+0x108>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f980 	bl	80007d0 <uartsendString>
			}
		}

		if (delayRead(&delay_LED2)) {
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <main+0xf0>)
 80024d2:	f7fe f8d3 	bl	800067c <delayRead>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0c5      	beq.n	8002468 <main+0x70>
			BSP_LED_Toggle(LED2);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fa27 	bl	8000930 <BSP_LED_Toggle>
		debounceFSM_update();
 80024e2:	e7c1      	b.n	8002468 <main+0x70>
 80024e4:	20000040 	.word	0x20000040
 80024e8:	200000d4 	.word	0x200000d4
 80024ec:	20000054 	.word	0x20000054
 80024f0:	08002824 	.word	0x08002824
 80024f4:	200000e0 	.word	0x200000e0
 80024f8:	200000e1 	.word	0x200000e1
 80024fc:	2000005c 	.word	0x2000005c
 8002500:	20000058 	.word	0x20000058

08002504 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b094      	sub	sp, #80	; 0x50
 8002508:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <SystemClock_Config+0xbc>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <SystemClock_Config+0xbc>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <SystemClock_Config+0xbc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <SystemClock_Config+0xc0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <SystemClock_Config+0xc0>)
 8002530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <SystemClock_Config+0xc0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002542:	2301      	movs	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002546:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800254a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254c:	2302      	movs	r3, #2
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002556:	2308      	movs	r3, #8
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800255a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002560:	2302      	movs	r3, #2
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002564:	2307      	movs	r3, #7
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fee9 	bl	8001344 <HAL_RCC_OscConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8002578:	f000 f826 	bl	80025c8 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800257c:	f7fe fe92 	bl	80012a4 <HAL_PWREx_EnableOverDrive>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8002586:	f000 f81f 	bl	80025c8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800258a:	230f      	movs	r3, #15
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258e:	2302      	movs	r3, #2
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80025a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025a6:	2105      	movs	r1, #5
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f943 	bl	8001834 <HAL_RCC_ClockConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 80025b4:	f000 f808 	bl	80025c8 <Error_Handler>
	}
}
 80025b8:	bf00      	nop
 80025ba:	3750      	adds	r7, #80	; 0x50
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000

080025c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe f995 	bl	80008fc <BSP_LED_On>
	while (1) {
 80025d2:	e7fe      	b.n	80025d2 <Error_Handler+0xa>

080025d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025da:	e003      	b.n	80025e4 <LoopCopyDataInit>

080025dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025e2:	3104      	adds	r1, #4

080025e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025ec:	d3f6      	bcc.n	80025dc <CopyDataInit>
  ldr  r2, =_sbss
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f0:	e002      	b.n	80025f8 <LoopFillZerobss>

080025f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025f4:	f842 3b04 	str.w	r3, [r2], #4

080025f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025fc:	d3f9      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025fe:	f7fe fa1d 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002602:	f000 f811 	bl	8002628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002606:	f7ff fef7 	bl	80023f8 <main>
  bx  lr    
 800260a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800260c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002610:	08002868 	.word	0x08002868
  ldr  r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002618:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 800261c:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 8002620:	200000e4 	.word	0x200000e4

08002624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC_IRQHandler>
	...

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	4d0d      	ldr	r5, [pc, #52]	; (8002660 <__libc_init_array+0x38>)
 800262c:	4c0d      	ldr	r4, [pc, #52]	; (8002664 <__libc_init_array+0x3c>)
 800262e:	1b64      	subs	r4, r4, r5
 8002630:	10a4      	asrs	r4, r4, #2
 8002632:	2600      	movs	r6, #0
 8002634:	42a6      	cmp	r6, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	4d0b      	ldr	r5, [pc, #44]	; (8002668 <__libc_init_array+0x40>)
 800263a:	4c0c      	ldr	r4, [pc, #48]	; (800266c <__libc_init_array+0x44>)
 800263c:	f000 f818 	bl	8002670 <_init>
 8002640:	1b64      	subs	r4, r4, r5
 8002642:	10a4      	asrs	r4, r4, #2
 8002644:	2600      	movs	r6, #0
 8002646:	42a6      	cmp	r6, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002650:	4798      	blx	r3
 8002652:	3601      	adds	r6, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	f855 3b04 	ldr.w	r3, [r5], #4
 800265a:	4798      	blx	r3
 800265c:	3601      	adds	r6, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	08002860 	.word	0x08002860
 8002664:	08002860 	.word	0x08002860
 8002668:	08002860 	.word	0x08002860
 800266c:	08002864 	.word	0x08002864

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
