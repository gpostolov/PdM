 /**
  ******************************************************************************
  * @file	main.c
  * @author	Gabriel Postolov
  * @brief	Main File para la Practica2
  ******************************************************************************
  * @attention
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/** @addtogroup STM32F4xx_HAL_Examples
  * @{
  */

/** @addtogroup UART_Printf
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
static const tick_t duration_led1 = 100;
static const tick_t duration_led2 = 200;
static const tick_t duration_led3 = 300;

static delay_t delay_LED1;
static delay_t delay_LED2;
static delay_t delay_LED3;

/* UART handler declaration */
UART_HandleTypeDef UartHandle;

/* Private function prototypes -----------------------------------------------*/

static void SystemClock_Config(void);
static void Error_Handler(void);

/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
  /* STM32F4xx HAL library initialization:
       - Configure the Flash prefetch
       - Systick timer is configured by default as source of time base, but user
         can eventually implement his proper time base source (a general purpose
         timer for example or other time source), keeping in mind that Time base
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
  BSP_LED_Init(LED2);
  BSP_LED_Init(LED3);

  /* Creating delays */


  /* Initializing delays */
  delayInit(&delay_LED1, duration_led1);
  delayInit(&delay_LED2, duration_led2);
  delayInit(&delay_LED3, duration_led3);

  /* Infinite loop */
  while (1)
  {
	  if (delayRead(&delay_LED1))
	  {
		 /* Delay for LED 1 has elapsed.*/
		 BSP_LED_Toggle(LED1);
	  }

	  if (delayRead(&delay_LED2))
	  {
		  /* Delay for LED 2 has elapsed.*/
		  BSP_LED_Toggle(LED2);
	  }

	  if (delayRead(&delay_LED3))
	  {
		  /* Delay for LED 3 has elapsed.*/
		  BSP_LED_Toggle(LED3);
	  }

  }
}

/**
  * @brief  Initializes non-blocking delay.
  * @param  delay: Delay to be initialized.
  * @param  duration: Delay duration in ms.
  *
  */
void delayInit(delay_t *delay, tick_t duration)
{
	/* Checking received parameters */
	if (delay == NULL || duration == 0)
	{
		return;
	}

	/* Initializing delay */
	delay->duration = duration;
	delay->running = false;
}

/**
  * @brief  Checks if delay has elapsed
  * @param  delay: Delay to be checked.
  *
  * @retval True if the delay has elapsed, otherwise False.
  */
bool_t delayRead(delay_t * delay)
{
	bool_t result = false;

	/* Checking received parameters */
	if (delay == NULL)
	{
		return result;
	}

	if (delay->running)
	{
		/* Delay is running. Checking if the delay has elapsed. */
		if ((HAL_GetTick() - delay->startTime) >= delay->duration)
		{
			/* Delay has elapsed */
			delay->startTime = HAL_GetTick();
			result =  true;
		}
	}
	else
	{
		/* Delay is not running. Taking timestamp and switching to running. */
		delay->startTime = HAL_GetTick();
		delay->running = true;
	}

	return result;
}

/**
  * @brief  Changes delay duration.
  * @param  delay: Delay to be initialized.
  * @param  duration: Delay duration in ms.
  *
  */
void delayWrite(delay_t *delay, tick_t duration)
{
	/* Checking received parameters */
	if (delay == NULL || duration == 0)
	{
		return;
	}

	delay->duration = duration;
}

/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow :
  *            System Clock source            = PLL (HSE)
  *            SYSCLK(Hz)                     = 180000000
  *            HCLK(Hz)                       = 180000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 4
  *            APB2 Prescaler                 = 2
  *            HSE Frequency(Hz)              = 8000000
  *            PLL_M                          = 8
  *            PLL_N                          = 360
  *            PLL_P                          = 2
  *            PLL_Q                          = 7
  *            PLL_R                          = 2
  *            VDD(V)                         = 3.3
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    /* Initialization Error */
    Error_Handler();
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    /* Initialization Error */
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    /* Initialization Error */
    Error_Handler();
  }
}
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED2 on */
  BSP_LED_On(LED2);
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
