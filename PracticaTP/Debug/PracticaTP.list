
PracticaTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004550  08004550  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004558  08004558  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08004560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          00000170  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c476  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f04  00000000  00000000  0002c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e0  00000000  00000000  0002eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266ff  00000000  00000000  0002f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001138f  00000000  00000000  00055f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d25  00000000  00000000  00067316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a03b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b40  00000000  00000000  0014a08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080042a0 	.word	0x080042a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	080042a0 	.word	0x080042a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b974 	b.w	8000cdc <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	468e      	mov	lr, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14d      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	d969      	bls.n	8000af4 <__udivmoddi4+0xe8>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b152      	cbz	r2, 8000a3c <__udivmoddi4+0x30>
 8000a26:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2a:	f1c2 0120 	rsb	r1, r2, #32
 8000a2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a36:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a40:	0c21      	lsrs	r1, r4, #16
 8000a42:	fbbe f6f8 	udiv	r6, lr, r8
 8000a46:	fa1f f78c 	uxth.w	r7, ip
 8000a4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a52:	fb06 f107 	mul.w	r1, r6, r7
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 811f 	bcs.w	8000ca4 <__udivmoddi4+0x298>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 811c 	bls.w	8000ca4 <__udivmoddi4+0x298>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 f707 	mul.w	r7, r0, r7
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x92>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a90:	f080 810a 	bcs.w	8000ca8 <__udivmoddi4+0x29c>
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	f240 8107 	bls.w	8000ca8 <__udivmoddi4+0x29c>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa2:	1be4      	subs	r4, r4, r7
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa4>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d909      	bls.n	8000ace <__udivmoddi4+0xc2>
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	f000 80ef 	beq.w	8000c9e <__udivmoddi4+0x292>
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	fab3 f683 	clz	r6, r3
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d14a      	bne.n	8000b6c <__udivmoddi4+0x160>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xd4>
 8000ada:	4282      	cmp	r2, r0
 8000adc:	f200 80f9 	bhi.w	8000cd2 <__udivmoddi4+0x2c6>
 8000ae0:	1a84      	subs	r4, r0, r2
 8000ae2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	469e      	mov	lr, r3
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d0e0      	beq.n	8000ab0 <__udivmoddi4+0xa4>
 8000aee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af2:	e7dd      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000af4:	b902      	cbnz	r2, 8000af8 <__udivmoddi4+0xec>
 8000af6:	deff      	udf	#255	; 0xff
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f040 8092 	bne.w	8000c26 <__udivmoddi4+0x21a>
 8000b02:	eba1 010c 	sub.w	r1, r1, ip
 8000b06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0a:	fa1f fe8c 	uxth.w	lr, ip
 8000b0e:	2601      	movs	r6, #1
 8000b10:	0c20      	lsrs	r0, r4, #16
 8000b12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b16:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b1e:	fb0e f003 	mul.w	r0, lr, r3
 8000b22:	4288      	cmp	r0, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x12c>
 8000b26:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x12a>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f200 80cb 	bhi.w	8000ccc <__udivmoddi4+0x2c0>
 8000b36:	4643      	mov	r3, r8
 8000b38:	1a09      	subs	r1, r1, r0
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b40:	fb07 1110 	mls	r1, r7, r0, r1
 8000b44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b48:	fb0e fe00 	mul.w	lr, lr, r0
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x156>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x154>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f200 80bb 	bhi.w	8000cd6 <__udivmoddi4+0x2ca>
 8000b60:	4608      	mov	r0, r1
 8000b62:	eba4 040e 	sub.w	r4, r4, lr
 8000b66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6a:	e79c      	b.n	8000aa6 <__udivmoddi4+0x9a>
 8000b6c:	f1c6 0720 	rsb	r7, r6, #32
 8000b70:	40b3      	lsls	r3, r6
 8000b72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b82:	431c      	orrs	r4, r3
 8000b84:	40f9      	lsrs	r1, r7
 8000b86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b92:	0c20      	lsrs	r0, r4, #16
 8000b94:	fa1f fe8c 	uxth.w	lr, ip
 8000b98:	fb09 1118 	mls	r1, r9, r8, r1
 8000b9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	fa02 f206 	lsl.w	r2, r2, r6
 8000baa:	d90b      	bls.n	8000bc4 <__udivmoddi4+0x1b8>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb4:	f080 8088 	bcs.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	f240 8085 	bls.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc2:	4461      	add	r1, ip
 8000bc4:	1a09      	subs	r1, r1, r0
 8000bc6:	b2a4      	uxth	r4, r4
 8000bc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd8:	458e      	cmp	lr, r1
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1e2>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be4:	d26c      	bcs.n	8000cc0 <__udivmoddi4+0x2b4>
 8000be6:	458e      	cmp	lr, r1
 8000be8:	d96a      	bls.n	8000cc0 <__udivmoddi4+0x2b4>
 8000bea:	3802      	subs	r0, #2
 8000bec:	4461      	add	r1, ip
 8000bee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bf6:	eba1 010e 	sub.w	r1, r1, lr
 8000bfa:	42a1      	cmp	r1, r4
 8000bfc:	46c8      	mov	r8, r9
 8000bfe:	46a6      	mov	lr, r4
 8000c00:	d356      	bcc.n	8000cb0 <__udivmoddi4+0x2a4>
 8000c02:	d053      	beq.n	8000cac <__udivmoddi4+0x2a0>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x212>
 8000c06:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c12:	fa22 f306 	lsr.w	r3, r2, r6
 8000c16:	40f1      	lsrs	r1, r6
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c1e:	2600      	movs	r6, #0
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	40d8      	lsrs	r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	fa21 f303 	lsr.w	r3, r1, r3
 8000c34:	4091      	lsls	r1, r2
 8000c36:	4301      	orrs	r1, r0
 8000c38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c44:	fb07 3610 	mls	r6, r7, r0, r3
 8000c48:	0c0b      	lsrs	r3, r1, #16
 8000c4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c52:	429e      	cmp	r6, r3
 8000c54:	fa04 f402 	lsl.w	r4, r4, r2
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x260>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c62:	d22f      	bcs.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c64:	429e      	cmp	r6, r3
 8000c66:	d92d      	bls.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	b289      	uxth	r1, r1
 8000c70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c74:	fb07 3316 	mls	r3, r7, r6, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x28a>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c8c:	d216      	bcs.n	8000cbc <__udivmoddi4+0x2b0>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d914      	bls.n	8000cbc <__udivmoddi4+0x2b0>
 8000c92:	3e02      	subs	r6, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c9c:	e738      	b.n	8000b10 <__udivmoddi4+0x104>
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e705      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e3      	b.n	8000a70 <__udivmoddi4+0x64>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6f8      	b.n	8000a9e <__udivmoddi4+0x92>
 8000cac:	454b      	cmp	r3, r9
 8000cae:	d2a9      	bcs.n	8000c04 <__udivmoddi4+0x1f8>
 8000cb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7a3      	b.n	8000c04 <__udivmoddi4+0x1f8>
 8000cbc:	4646      	mov	r6, r8
 8000cbe:	e7ea      	b.n	8000c96 <__udivmoddi4+0x28a>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	e794      	b.n	8000bee <__udivmoddi4+0x1e2>
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	e7d1      	b.n	8000c6c <__udivmoddi4+0x260>
 8000cc8:	46d0      	mov	r8, sl
 8000cca:	e77b      	b.n	8000bc4 <__udivmoddi4+0x1b8>
 8000ccc:	3b02      	subs	r3, #2
 8000cce:	4461      	add	r1, ip
 8000cd0:	e732      	b.n	8000b38 <__udivmoddi4+0x12c>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e709      	b.n	8000aea <__udivmoddi4+0xde>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e742      	b.n	8000b62 <__udivmoddi4+0x156>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <debounceFSM_init>:
/**
 * @brief  Initialize FSM.
 * @param  None.
 * @retval None.
 */
void debounceFSM_init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 8000ce4:	2128      	movs	r1, #40	; 0x28
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <debounceFSM_init+0x1c>)
 8000ce8:	f000 f89c 	bl	8000e24 <delayInit>
	current_state = BUTTON_UP;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <debounceFSM_init+0x20>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
	pressed = false;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <debounceFSM_init+0x24>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000074 	.word	0x20000074
 8000d00:	20000080 	.word	0x20000080
 8000d04:	20000081 	.word	0x20000081

08000d08 <debounceFSM_update>:
/**
 * @brief  Update FSM.
 * @param  None.
 * @retval None.
 */
void debounceFSM_update(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	switch (current_state) {
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d853      	bhi.n	8000dbc <debounceFSM_update+0xb4>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <debounceFSM_update+0x14>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	08000d75 	.word	0x08000d75
 8000d28:	08000d91 	.word	0x08000d91
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fccd 	bl	80016cc <BSP_PB_GetState>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d044      	beq.n	8000dc2 <debounceFSM_update+0xba>
			delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 8000d38:	2128      	movs	r1, #40	; 0x28
 8000d3a:	4827      	ldr	r0, [pc, #156]	; (8000dd8 <debounceFSM_update+0xd0>)
 8000d3c:	f000 f872 	bl	8000e24 <delayInit>
			current_state = BUTTON_FALLING;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d46:	e03c      	b.n	8000dc2 <debounceFSM_update+0xba>
	case BUTTON_FALLING:
		if (delayRead(&delay_BUTTON)) {
 8000d48:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <debounceFSM_update+0xd0>)
 8000d4a:	f000 f887 	bl	8000e5c <delayRead>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d038      	beq.n	8000dc6 <debounceFSM_update+0xbe>
			if (BSP_PB_GetState(BUTTON_USER)) {
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 fcb9 	bl	80016cc <BSP_PB_GetState>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <debounceFSM_update+0x64>
				current_state = BUTTON_DOWN;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000d66:	f000 f839 	bl	8000ddc <buttonPressed>
			} else {
				current_state = BUTTON_UP;
			}
		}
		break;
 8000d6a:	e02c      	b.n	8000dc6 <debounceFSM_update+0xbe>
				current_state = BUTTON_UP;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		break;
 8000d72:	e028      	b.n	8000dc6 <debounceFSM_update+0xbe>
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fca9 	bl	80016cc <BSP_PB_GetState>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d124      	bne.n	8000dca <debounceFSM_update+0xc2>
			delayInit(&delay_BUTTON, DEBOUNCING_DELAY);
 8000d80:	2128      	movs	r1, #40	; 0x28
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <debounceFSM_update+0xd0>)
 8000d84:	f000 f84e 	bl	8000e24 <delayInit>
			current_state = BUTTON_RAISING;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d8e:	e01c      	b.n	8000dca <debounceFSM_update+0xc2>
	case BUTTON_RAISING:
		if (delayRead(&delay_BUTTON)) {
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <debounceFSM_update+0xd0>)
 8000d92:	f000 f863 	bl	8000e5c <delayRead>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d018      	beq.n	8000dce <debounceFSM_update+0xc6>
			if (BSP_PB_GetState(BUTTON_USER)) {
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 fc95 	bl	80016cc <BSP_PB_GetState>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <debounceFSM_update+0xa8>
				current_state = BUTTON_DOWN;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
			} else {
				current_state = BUTTON_UP;
				buttonReleased();
			}
		}
		break;
 8000dae:	e00e      	b.n	8000dce <debounceFSM_update+0xc6>
				current_state = BUTTON_UP;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <debounceFSM_update+0xcc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000db6:	f000 f81d 	bl	8000df4 <buttonReleased>
		break;
 8000dba:	e008      	b.n	8000dce <debounceFSM_update+0xc6>
	default:
		debounceFSM_init();
 8000dbc:	f7ff ff90 	bl	8000ce0 <debounceFSM_init>
		break;
 8000dc0:	e006      	b.n	8000dd0 <debounceFSM_update+0xc8>
		break;
 8000dc2:	bf00      	nop
 8000dc4:	e004      	b.n	8000dd0 <debounceFSM_update+0xc8>
		break;
 8000dc6:	bf00      	nop
 8000dc8:	e002      	b.n	8000dd0 <debounceFSM_update+0xc8>
		break;
 8000dca:	bf00      	nop
 8000dcc:	e000      	b.n	8000dd0 <debounceFSM_update+0xc8>
		break;
 8000dce:	bf00      	nop
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000080 	.word	0x20000080
 8000dd8:	20000074 	.word	0x20000074

08000ddc <buttonPressed>:
/**
 * @brief  Button User pressed.
 * @param  None.
 * @retval None.
 */
void buttonPressed(void) {
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	pressed = true;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <buttonPressed+0x14>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	20000081 	.word	0x20000081

08000df4 <buttonReleased>:
/**
 * @brief  Button User released.
 * @param  None.
 * @retval None.
 */
void buttonReleased(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	pressed = false;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <buttonReleased+0x14>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20000081 	.word	0x20000081

08000e0c <readKey>:
 * @brief  Read key.
 * @param  None.
 * @retval true: Button User pressed.
 * @retval false: Button User not pressed.
 */
bool readKey(void) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	return pressed;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <readKey+0x14>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000081 	.word	0x20000081

08000e24 <delayInit>:
 * @brief  Initialize the led delays.
 * @param  delay: delay to be initialized.
 * @param  duration: duration in milliseconds of the delay.
 * @retval None.
 */
void delayInit(delay_t *delay, tick_t duration) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	if (delay == NULL) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d105      	bne.n	8000e40 <delayInit+0x1c>
		delay->startTime = HAL_GetTick();
 8000e34:	f000 fd24 	bl	8001880 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
		return;
 8000e3e:	e00a      	b.n	8000e56 <delayInit+0x32>
	} else {
		delay->duration = duration;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 8000e4c:	f000 fd18 	bl	8001880 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
	}
}
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <delayRead>:
 * whether or not the time has expired.
 * @param  delay: delay to be checked.
 * @retval true: the time has expired.
 * @retval false: the time has not expired.
 */
bool_t delayRead(delay_t *delay) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <delayRead+0x12>
		return false;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e01f      	b.n	8000eae <delayRead+0x52>
	} else {
		if (delay->running) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d012      	beq.n	8000e9c <delayRead+0x40>
			if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000e76:	f000 fd03 	bl	8001880 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d306      	bcc.n	8000e98 <delayRead+0x3c>
				delay->startTime = HAL_GetTick();
 8000e8a:	f000 fcf9 	bl	8001880 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	601a      	str	r2, [r3, #0]
				return true;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00a      	b.n	8000eae <delayRead+0x52>
			} else {
				return false;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e008      	b.n	8000eae <delayRead+0x52>
			}
		} else {
			delay->startTime = HAL_GetTick();
 8000e9c:	f000 fcf0 	bl	8001880 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	721a      	strb	r2, [r3, #8]
			return false;
 8000eac:	2300      	movs	r3, #0
		}
	}
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <i2c_config>:
 * @brief  Configuration of the I2C peripheral.
 * @param  None.
 * @retval true: The configuration was successful.
 * @retval false: The configuration was not successful.
 */
static bool i2c_config(void) { //COMENTARIO: Separo en funciones privadas y publicas
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	I2cHandle.Instance = I2Cx;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <i2c_config+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <i2c_config+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
	I2cHandle.Init.ClockSpeed = I2C_CLOCKSPEED_100K;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <i2c_config+0x4c>)
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <i2c_config+0x54>)
 8000ec6:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.OwnAddress1 = I2C_OWN_ADDRESS1;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <i2c_config+0x4c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <i2c_config+0x4c>)
 8000ed0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed4:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <i2c_config+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
	I2cHandle.Init.OwnAddress2 = I2C_OWN_ADDRESS2;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <i2c_config+0x4c>)
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	619a      	str	r2, [r3, #24]
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <i2c_config+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <i2c_config+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <i2c_config+0x4c>)
 8000ef0:	f000 ffdc 	bl	8001eac <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <i2c_config+0x46>
		/* Configuration Error */
		// TODO Error_Handler();
		return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <i2c_config+0x48>
	}
	return true;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000084 	.word	0x20000084
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <dataAnalysis>:
 * @retval NO_ALARM_: No Alarm.
 * @retval MAX_TEMP_ABS_: Alarm. Maximum temperature was reached.
 * @retval MAX_TEMP_DIFF_: Alarm. Temperature difference was reached in less than 3 minutes.
 * @retval MAX_HUM_DIFF_: Alarm. Humidity difference was reached in less than 3 minutes.
 */
alarmType_t dataAnalysis(void){
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t temp_diff = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
	uint32_t hum_diff = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]

	if (temperature > MAX_TEMP_ABS) return MAX_TEMP_ABS_;
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <dataAnalysis+0xe8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b32      	cmp	r3, #50	; 0x32
 8000f24:	d901      	bls.n	8000f2a <dataAnalysis+0x1a>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e060      	b.n	8000fec <dataAnalysis+0xdc>

	if(read_counter>=ARRAY_TH) read_counter=0;
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <dataAnalysis+0xec>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d902      	bls.n	8000f38 <dataAnalysis+0x28>
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <dataAnalysis+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
	temperature_array[read_counter]=temperature;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <dataAnalysis+0xec>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <dataAnalysis+0xe8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <dataAnalysis+0xf0>)
 8000f44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	humidity_array[read_counter]=humidity;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <dataAnalysis+0xec>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <dataAnalysis+0xf4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <dataAnalysis+0xf8>)
 8000f54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	read_counter++;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <dataAnalysis+0xec>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <dataAnalysis+0xec>)
 8000f62:	701a      	strb	r2, [r3, #0]

	for(i=0;i<ARRAY_TH;i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e03c      	b.n	8000fe4 <dataAnalysis+0xd4>
		temp_diff = (temperature>temperature_array[i])?(temperature-temperature_array[i]):(temperature_array[i]-temperature);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4a24      	ldr	r2, [pc, #144]	; (8001000 <dataAnalysis+0xf0>)
 8000f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <dataAnalysis+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d207      	bcs.n	8000f8a <dataAnalysis+0x7a>
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <dataAnalysis+0xe8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	491f      	ldr	r1, [pc, #124]	; (8001000 <dataAnalysis+0xf0>)
 8000f82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	e006      	b.n	8000f98 <dataAnalysis+0x88>
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <dataAnalysis+0xf0>)
 8000f8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <dataAnalysis+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	60bb      	str	r3, [r7, #8]
		if (temp_diff > MAX_TEMP_DIFF) return MAX_TEMP_DIFF_;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d901      	bls.n	8000fa4 <dataAnalysis+0x94>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e023      	b.n	8000fec <dataAnalysis+0xdc>
		hum_diff = (humidity>humidity_array[i])?(humidity-humidity_array[i]):(humidity_array[i]-humidity);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <dataAnalysis+0xf8>)
 8000fa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <dataAnalysis+0xf4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <dataAnalysis+0xb4>
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <dataAnalysis+0xf4>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	4913      	ldr	r1, [pc, #76]	; (8001008 <dataAnalysis+0xf8>)
 8000fbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	e006      	b.n	8000fd2 <dataAnalysis+0xc2>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <dataAnalysis+0xf8>)
 8000fc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <dataAnalysis+0xf4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	607b      	str	r3, [r7, #4]
		if (hum_diff > MAX_HUM_DIFF) return MAX_HUM_DIFF_;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b14      	cmp	r3, #20
 8000fd8:	d901      	bls.n	8000fde <dataAnalysis+0xce>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e006      	b.n	8000fec <dataAnalysis+0xdc>
	for(i=0;i<ARRAY_TH;i++){
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d9bf      	bls.n	8000f6a <dataAnalysis+0x5a>
	}

	return NO_ALARM_;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000104 	.word	0x20000104
 8000ffc:	2000010c 	.word	0x2000010c
 8001000:	20000110 	.word	0x20000110
 8001004:	20000108 	.word	0x20000108
 8001008:	20000134 	.word	0x20000134
 800100c:	00000000 	.word	0x00000000

08001010 <readTH>:
 * @param  temp: Temperature to be read.
 * @param  hum: Humidity to be read.
 * @retval true: The reading was successful..
 * @retval false: The reading was not successful.
 */
static bool readTH(uint32_t *temp, uint32_t *hum) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	if(temp == NULL) return false;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <readTH+0x14>
 8001020:	2300      	movs	r3, #0
 8001022:	e06d      	b.n	8001100 <readTH+0xf0>
	if(hum == NULL) return false;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <readTH+0x1e>
 800102a:	2300      	movs	r3, #0
 800102c:	e068      	b.n	8001100 <readTH+0xf0>

	//Command to read from SHT3X-DIS
	tx_buffer[0] = 0x2C;
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <readTH+0x100>)
 8001030:	222c      	movs	r2, #44	; 0x2c
 8001032:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = 0x06;
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <readTH+0x100>)
 8001036:	2206      	movs	r2, #6
 8001038:	705a      	strb	r2, [r3, #1]
	memset(rx_buffer, 0, RXBUFFERSIZE);
 800103a:	2214      	movs	r2, #20
 800103c:	2100      	movs	r1, #0
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <readTH+0x104>)
 8001040:	f003 f926 	bl	8004290 <memset>

	if ((HAL_I2C_Master_Transmit(&I2cHandle, SLAVE_DEV_ADDRESS, tx_buffer, 2,
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <readTH+0x100>)
 800104c:	2144      	movs	r1, #68	; 0x44
 800104e:	4832      	ldr	r0, [pc, #200]	; (8001118 <readTH+0x108>)
 8001050:	f001 f870 	bl	8002134 <HAL_I2C_Master_Transmit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <readTH+0x4e>
			I2C_TXRX_TIMEOUT)) != HAL_OK)
		return false;
 800105a:	2300      	movs	r3, #0
 800105c:	e050      	b.n	8001100 <readTH+0xf0>
	if ((HAL_I2C_Master_Receive(&I2cHandle, SLAVE_DEV_ADDRESS, rx_buffer, 6,
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2306      	movs	r3, #6
 8001064:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <readTH+0x104>)
 8001066:	2144      	movs	r1, #68	; 0x44
 8001068:	482b      	ldr	r0, [pc, #172]	; (8001118 <readTH+0x108>)
 800106a:	f001 f961 	bl	8002330 <HAL_I2C_Master_Receive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <readTH+0x68>
			I2C_TXRX_TIMEOUT)) != HAL_OK)
		return false;
 8001074:	2300      	movs	r3, #0
 8001076:	e043      	b.n	8001100 <readTH+0xf0>

	*temp = (uint32_t)(((rx_buffer[0]*256) + rx_buffer[1])*175)/65535.0-45.0;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <readTH+0x104>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <readTH+0x104>)
 8001080:	7852      	ldrb	r2, [r2, #1]
 8001082:	4413      	add	r3, r2
 8001084:	22af      	movs	r2, #175	; 0xaf
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9fa 	bl	8000484 <__aeabi_ui2d>
 8001090:	a31d      	add	r3, pc, #116	; (adr r3, 8001108 <readTH+0xf8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fb99 	bl	80007cc <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <readTH+0x10c>)
 80010a8:	f7ff f8ae 	bl	8000208 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fc72 	bl	800099c <__aeabi_d2uiz>
 80010b8:	4602      	mov	r2, r0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
	*hum =  (uint32_t)(((rx_buffer[3]*256) + rx_buffer[4]))*100.0/65535.0;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <readTH+0x104>)
 80010c0:	78db      	ldrb	r3, [r3, #3]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <readTH+0x104>)
 80010c6:	7912      	ldrb	r2, [r2, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f9da 	bl	8000484 <__aeabi_ui2d>
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <readTH+0x110>)
 80010d6:	f7ff fa4f 	bl	8000578 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a309      	add	r3, pc, #36	; (adr r3, 8001108 <readTH+0xf8>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fb70 	bl	80007cc <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fc52 	bl	800099c <__aeabi_d2uiz>
 80010f8:	4602      	mov	r2, r0
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	601a      	str	r2, [r3, #0]
	return true;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	00000000 	.word	0x00000000
 800110c:	40efffe0 	.word	0x40efffe0
 8001110:	200000d8 	.word	0x200000d8
 8001114:	200000ec 	.word	0x200000ec
 8001118:	20000084 	.word	0x20000084
 800111c:	40468000 	.word	0x40468000
 8001120:	40590000 	.word	0x40590000

08001124 <alarmTH_FSM_init>:
/**
 * @brief  Initialize FSM (alarmTH_FSM).
 * @param  None.
 * @retval None.
 */
static void alarmTH_FSM_init(void) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
	uint8_t i;

	temperature = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <alarmTH_FSM_init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
	humidity = 0;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <alarmTH_FSM_init+0x5c>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
	read_counter = 0;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <alarmTH_FSM_init+0x60>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

	for(i=0; i<ARRAY_TH; i++){
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	e00c      	b.n	800115c <alarmTH_FSM_init+0x38>
		temperature_array[i]=0;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4a10      	ldr	r2, [pc, #64]	; (8001188 <alarmTH_FSM_init+0x64>)
 8001146:	2100      	movs	r1, #0
 8001148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		humidity_array[i]=0;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <alarmTH_FSM_init+0x68>)
 8001150:	2100      	movs	r1, #0
 8001152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=0; i<ARRAY_TH; i++){
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3301      	adds	r3, #1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d9ef      	bls.n	8001142 <alarmTH_FSM_init+0x1e>
	}

	current_state = READ;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <alarmTH_FSM_init+0x6c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	current_alarm_state = NO_ALARM_;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <alarmTH_FSM_init+0x70>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000104 	.word	0x20000104
 8001180:	20000108 	.word	0x20000108
 8001184:	2000010c 	.word	0x2000010c
 8001188:	20000110 	.word	0x20000110
 800118c:	20000134 	.word	0x20000134
 8001190:	20000100 	.word	0x20000100
 8001194:	20000101 	.word	0x20000101

08001198 <i2c_init>:
 * @brief  Initialize the API_I2C: I2C peripheral, Button User, Buffers, FSM alarm.
 * @param  None.
 * @retval true: The initialization was successful.
 * @retval false: The initialization was not successful.
 */
bool i2c_init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	if (TXBUFFERSIZE > MAXBUFFERSIZE)
		return false;	//COMENTARIO: Chequeo valores
	if (RXBUFFERSIZE > MAXBUFFERSIZE)
		return false;
	memset(tx_buffer, 0, TXBUFFERSIZE); //COMENTARIO: Inicializo todas las variables que se van a usar.
 800119c:	2214      	movs	r2, #20
 800119e:	2100      	movs	r1, #0
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <i2c_init+0x44>)
 80011a2:	f003 f875 	bl	8004290 <memset>
	memset(rx_buffer, 0, RXBUFFERSIZE);
 80011a6:	2214      	movs	r2, #20
 80011a8:	2100      	movs	r1, #0
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <i2c_init+0x48>)
 80011ac:	f003 f870 	bl	8004290 <memset>

	alarmTH_FSM_init();
 80011b0:	f7ff ffb8 	bl	8001124 <alarmTH_FSM_init>

	new_data = false;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <i2c_init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 fa2f 	bl	8001620 <BSP_PB_Init>

	debounceFSM_init();
 80011c2:	f7ff fd8d 	bl	8000ce0 <debounceFSM_init>

	/* Initialize delay for read Temperature and Humidity */
	delayInit(&delay_readTH, DELAY_READ_TH_DURATION);
 80011c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <i2c_init+0x50>)
 80011cc:	f7ff fe2a 	bl	8000e24 <delayInit>

	return i2c_config();
 80011d0:	f7ff fe72 	bl	8000eb8 <i2c_config>
 80011d4:	4603      	mov	r3, r0
	/* Initialization Error */
	// TODO Error_Handler();
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000d8 	.word	0x200000d8
 80011e0:	200000ec 	.word	0x200000ec
 80011e4:	20000158 	.word	0x20000158
 80011e8:	2000015c 	.word	0x2000015c

080011ec <alarmTH_FSM_update>:
 * @retval NO_ALARM_: No Alarm.
 * @retval MAX_TEMP_ABS_: Alarm. Maximum temperature was reached.
 * @retval MAX_TEMP_DIFF_: Alarm. Temperature difference was reached in less than 3 minutes.
 * @retval MAX_HUM_DIFF_: Alarm. Humidity difference was reached in less than 3 minutes.
 */
alarmType_t alarmTH_FSM_update(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	switch (current_state) {
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <alarmTH_FSM_update+0xac>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d842      	bhi.n	800127e <alarmTH_FSM_update+0x92>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <alarmTH_FSM_update+0x14>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001211 	.word	0x08001211
 8001204:	0800122d 	.word	0x0800122d
 8001208:	0800125b 	.word	0x0800125b
 800120c:	0800126f 	.word	0x0800126f
	case READ:
		if (readTH(&temperature,&humidity)) {
 8001210:	4922      	ldr	r1, [pc, #136]	; (800129c <alarmTH_FSM_update+0xb0>)
 8001212:	4823      	ldr	r0, [pc, #140]	; (80012a0 <alarmTH_FSM_update+0xb4>)
 8001214:	f7ff fefc 	bl	8001010 <readTH>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d032      	beq.n	8001284 <alarmTH_FSM_update+0x98>
			new_data = true;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <alarmTH_FSM_update+0xb8>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
			current_state = DATA_ANALYSIS;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <alarmTH_FSM_update+0xac>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
		}
		break;
 800122a:	e02b      	b.n	8001284 <alarmTH_FSM_update+0x98>
	case DATA_ANALYSIS:
		current_alarm_state = dataAnalysis();
 800122c:	f7ff fe70 	bl	8000f10 <dataAnalysis>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <alarmTH_FSM_update+0xbc>)
 8001236:	701a      	strb	r2, [r3, #0]
		if (current_alarm_state != NO_ALARM_) {
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <alarmTH_FSM_update+0xbc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <alarmTH_FSM_update+0x5c>
			current_state = ALARM;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <alarmTH_FSM_update+0xac>)
 8001242:	2203      	movs	r2, #3
 8001244:	701a      	strb	r2, [r3, #0]
		}else{
			current_state = WAIT;
			delayInit(&delay_readTH, DELAY_READ_TH_DURATION);
		}
		break;
 8001246:	e022      	b.n	800128e <alarmTH_FSM_update+0xa2>
			current_state = WAIT;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <alarmTH_FSM_update+0xac>)
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]
			delayInit(&delay_readTH, DELAY_READ_TH_DURATION);
 800124e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001252:	4816      	ldr	r0, [pc, #88]	; (80012ac <alarmTH_FSM_update+0xc0>)
 8001254:	f7ff fde6 	bl	8000e24 <delayInit>
		break;
 8001258:	e019      	b.n	800128e <alarmTH_FSM_update+0xa2>
	case WAIT:
		if (delayRead(&delay_readTH)) {
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <alarmTH_FSM_update+0xc0>)
 800125c:	f7ff fdfe 	bl	8000e5c <delayRead>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d010      	beq.n	8001288 <alarmTH_FSM_update+0x9c>
			current_state = READ;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <alarmTH_FSM_update+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800126c:	e00c      	b.n	8001288 <alarmTH_FSM_update+0x9c>
	case ALARM:
		if(readKey()){
 800126e:	f7ff fdcd 	bl	8000e0c <readKey>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d009      	beq.n	800128c <alarmTH_FSM_update+0xa0>
			alarmTH_FSM_init();
 8001278:	f7ff ff54 	bl	8001124 <alarmTH_FSM_init>
		}
		break;
 800127c:	e006      	b.n	800128c <alarmTH_FSM_update+0xa0>
	default:
		alarmTH_FSM_init();
 800127e:	f7ff ff51 	bl	8001124 <alarmTH_FSM_init>
		break;
 8001282:	e004      	b.n	800128e <alarmTH_FSM_update+0xa2>
		break;
 8001284:	bf00      	nop
 8001286:	e002      	b.n	800128e <alarmTH_FSM_update+0xa2>
		break;
 8001288:	bf00      	nop
 800128a:	e000      	b.n	800128e <alarmTH_FSM_update+0xa2>
		break;
 800128c:	bf00      	nop
	}

	return current_alarm_state;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <alarmTH_FSM_update+0xbc>)
 8001290:	781b      	ldrb	r3, [r3, #0]

}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000100 	.word	0x20000100
 800129c:	20000108 	.word	0x20000108
 80012a0:	20000104 	.word	0x20000104
 80012a4:	20000158 	.word	0x20000158
 80012a8:	20000101 	.word	0x20000101
 80012ac:	2000015c 	.word	0x2000015c

080012b0 <TH_updated>:
 * @param  temp: Temperature to be updated.
 * @param  hum: Humidity to be updated.
 * @retval true: Updated successful.
 * @retval false: Updated was not successful.
 */
bool TH_updated(uint32_t *temp, uint32_t *hum){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	if(temp == NULL) return false;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <TH_updated+0x14>
 80012c0:	2300      	movs	r3, #0
 80012c2:	e016      	b.n	80012f2 <TH_updated+0x42>
	if(hum == NULL) return false;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <TH_updated+0x1e>
 80012ca:	2300      	movs	r3, #0
 80012cc:	e011      	b.n	80012f2 <TH_updated+0x42>

	if(new_data){
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <TH_updated+0x50>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00c      	beq.n	80012f0 <TH_updated+0x40>
		new_data = false;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <TH_updated+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		*temp=temperature;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <TH_updated+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
		*hum=humidity;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <TH_updated+0x58>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
		return true;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <TH_updated+0x42>
	}

	return false;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000158 	.word	0x20000158
 8001304:	20000104 	.word	0x20000104
 8001308:	20000108 	.word	0x20000108

0800130c <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_I2C_MspInit+0x9c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800137a:	2304      	movs	r3, #4
 800137c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_I2C_MspInit+0xa0>)
 8001386:	f000 fb99 	bl	8001abc <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800138a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8001390:	2304      	movs	r3, #4
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <HAL_I2C_MspInit+0xa0>)
 800139c:	f000 fb8e 	bl	8001abc <HAL_GPIO_Init>
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400

080013b0 <uartinit>:
 * @param  None.
 * @retval true: UART initialized successfully.
 * @retval false: UART was not initialized successfully.
 *
 */
bool uartinit(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance = USARTx;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <uartinit+0xa8>)
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <uartinit+0xac>)
 80013b8:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = 9600;
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <uartinit+0xa8>)
 80013bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <uartinit+0xa8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <uartinit+0xa8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <uartinit+0xa8>)
 80013d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80013d4:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <uartinit+0xa8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <uartinit+0xa8>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <uartinit+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 80013e8:	481b      	ldr	r0, [pc, #108]	; (8001458 <uartinit+0xa8>)
 80013ea:	f002 fa37 	bl	800385c <HAL_UART_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <uartinit+0x48>
		return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e02d      	b.n	8001454 <uartinit+0xa4>
	}

	/* Output a message on Hyperterminal using printf function */
	uartsendString((uint8_t*) UART_CONFIG_M01);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <uartinit+0xb0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f841 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M02);
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <uartinit+0xb4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f83c 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M03);
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <uartinit+0xb8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f837 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M04);
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <uartinit+0xbc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f832 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M05);
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <uartinit+0xc0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f82d 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M06);
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <uartinit+0xc4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f828 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M07);
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <uartinit+0xc8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f823 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M08);
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <uartinit+0xcc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f81e 	bl	8001484 <uartsendString>
	uartsendString((uint8_t*) UART_CONFIG_M09);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <uartinit+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f819 	bl	8001484 <uartsendString>

	return true;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000168 	.word	0x20000168
 800145c:	40004800 	.word	0x40004800
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004
 8001468:	20000008 	.word	0x20000008
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000010 	.word	0x20000010
 8001474:	20000014 	.word	0x20000014
 8001478:	20000018 	.word	0x20000018
 800147c:	2000001c 	.word	0x2000001c
 8001480:	20000020 	.word	0x20000020

08001484 <uartsendString>:
/**
 * @brief  Send a string by UART.
 * @param  pstring: String to be sent.
 * @retval None.
 */
void uartsendString(uint8_t *pstring) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if (pstring == NULL) return;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01e      	beq.n	80014d0 <uartsendString+0x4c>

	uint16_t str_long = strlen((const char*) pstring);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7fe feac 	bl	80001f0 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	81fb      	strh	r3, [r7, #14]
	if (str_long == 0) return;
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d018      	beq.n	80014d4 <uartsendString+0x50>

	HAL_StatusTypeDef tx_status;
	tx_status = HAL_UART_Transmit(&UartHandle, pstring, str_long, UART_TX_TIMEOUT);
 80014a2:	89fa      	ldrh	r2, [r7, #14]
 80014a4:	23c8      	movs	r3, #200	; 0xc8
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <uartsendString+0x5c>)
 80014aa:	f002 fa24 	bl	80038f6 <HAL_UART_Transmit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	737b      	strb	r3, [r7, #13]

	//TODO
	switch (tx_status) {
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d80f      	bhi.n	80014d8 <uartsendString+0x54>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <uartsendString+0x3c>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014d9 	.word	0x080014d9
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014d9 	.word	0x080014d9
	if (pstring == NULL) return;
 80014d0:	bf00      	nop
 80014d2:	e002      	b.n	80014da <uartsendString+0x56>
	if (str_long == 0) return;
 80014d4:	bf00      	nop
 80014d6:	e000      	b.n	80014da <uartsendString+0x56>
	case HAL_BUSY:
		break;
	case HAL_TIMEOUT:
		break;
	default:
		break;
 80014d8:	bf00      	nop
	}
}
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000168 	.word	0x20000168

080014e4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10e      	bne.n	8001512 <BSP_LED_Init+0x2e>
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <BSP_LED_Init+0x94>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <BSP_LED_Init+0x94>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <BSP_LED_Init+0x94>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	e00d      	b.n	800152e <BSP_LED_Init+0x4a>
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <BSP_LED_Init+0x94>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <BSP_LED_Init+0x94>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <BSP_LED_Init+0x94>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <BSP_LED_Init+0x98>)
 8001532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <BSP_LED_Init+0x9c>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	f107 0214 	add.w	r2, r7, #20
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fab2 	bl	8001abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <BSP_LED_Init+0x9c>)
 800155c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <BSP_LED_Init+0x98>)
 8001564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	f000 fc6a 	bl	8001e44 <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	08004530 	.word	0x08004530
 8001580:	20000024 	.word	0x20000024

08001584 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <BSP_LED_On+0x2c>)
 8001592:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <BSP_LED_On+0x30>)
 800159a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	f000 fc4f 	bl	8001e44 <HAL_GPIO_WritePin>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000024 	.word	0x20000024
 80015b4:	08004530 	.word	0x08004530

080015b8 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <BSP_LED_Off+0x2c>)
 80015c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <BSP_LED_Off+0x30>)
 80015ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	f000 fc35 	bl	8001e44 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000024 	.word	0x20000024
 80015e8:	08004530 	.word	0x08004530

080015ec <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <BSP_LED_Toggle+0x2c>)
 80015fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <BSP_LED_Toggle+0x30>)
 8001602:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f000 fc34 	bl	8001e76 <HAL_GPIO_TogglePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000024 	.word	0x20000024
 800161c:	08004530 	.word	0x08004530

08001620 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <BSP_PB_Init+0xa4>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <BSP_PB_Init+0xa4>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <BSP_PB_Init+0xa4>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d112      	bne.n	8001678 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800165c:	2302      	movs	r3, #2
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <BSP_PB_Init+0xa8>)
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	f107 020c 	add.w	r2, r7, #12
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fa22 	bl	8001abc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d11d      	bne.n	80016ba <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001688:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800168c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <BSP_PB_Init+0xa8>)
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	f107 020c 	add.w	r2, r7, #12
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fa0d 	bl	8001abc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80016a2:	2328      	movs	r3, #40	; 0x28
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f9cf 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80016b0:	2328      	movs	r3, #40	; 0x28
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f9e6 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	20000030 	.word	0x20000030

080016cc <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <BSP_PB_GetState+0x28>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fb95 	bl	8001e14 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000030 	.word	0x20000030

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <SystemInit+0x60>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <SystemInit+0x60>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <SystemInit+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <SystemInit+0x64>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <SystemInit+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <SystemInit+0x64>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <SystemInit+0x64>)
 8001724:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <SystemInit+0x64>)
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <SystemInit+0x68>)
 8001732:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <SystemInit+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a08      	ldr	r2, [pc, #32]	; (800175c <SystemInit+0x64>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SystemInit+0x60>)
 8001748:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174c:	609a      	str	r2, [r3, #8]
#endif
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	40023800 	.word	0x40023800
 8001760:	24003010 	.word	0x24003010

08001764 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80017b8:	f000 f84e 	bl	8001858 <HAL_IncTick>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x34>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x34>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x34>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f92b 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f001 fb48 	bl	8002e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f943 	bl	8001aa2 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f90b 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000034 	.word	0x20000034
 8001850:	2000003c 	.word	0x2000003c
 8001854:	20000038 	.word	0x20000038

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2000003c 	.word	0x2000003c
 800187c:	200001ac 	.word	0x200001ac

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200001ac 	.word	0x200001ac

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff29 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff3e 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff31 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa2 	bl	80019f4 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e177      	b.n	8001dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8166 	bne.w	8001dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d005      	beq.n	8001b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d130      	bne.n	8001b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d017      	beq.n	8001bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80c0 	beq.w	8001dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <HAL_GPIO_Init+0x324>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a65      	ldr	r2, [pc, #404]	; (8001de0 <HAL_GPIO_Init+0x324>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_GPIO_Init+0x324>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5e:	4a61      	ldr	r2, [pc, #388]	; (8001de4 <HAL_GPIO_Init+0x328>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d037      	beq.n	8001cfa <HAL_GPIO_Init+0x23e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <HAL_GPIO_Init+0x23a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_GPIO_Init+0x334>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02b      	beq.n	8001cf2 <HAL_GPIO_Init+0x236>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a55      	ldr	r2, [pc, #340]	; (8001df4 <HAL_GPIO_Init+0x338>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x232>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_GPIO_Init+0x33c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x22e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a53      	ldr	r2, [pc, #332]	; (8001dfc <HAL_GPIO_Init+0x340>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x22a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x344>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x226>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x348>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x222>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_GPIO_Init+0x34c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x21e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x21a>
 8001cd2:	2309      	movs	r3, #9
 8001cd4:	e012      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	e010      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cda:	2308      	movs	r3, #8
 8001cdc:	e00e      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4935      	ldr	r1, [pc, #212]	; (8001de4 <HAL_GPIO_Init+0x328>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_GPIO_Init+0x354>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f ae84 	bls.w	8001ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40021400 	.word	0x40021400
 8001e00:	40021800 	.word	0x40021800
 8001e04:	40021c00 	.word	0x40021c00
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40022400 	.word	0x40022400
 8001e10:	40013c00 	.word	0x40013c00

08001e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e12b      	b.n	8002116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fa1a 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f10:	f001 fc7c 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8001f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a81      	ldr	r2, [pc, #516]	; (8002120 <HAL_I2C_Init+0x274>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d807      	bhi.n	8001f30 <HAL_I2C_Init+0x84>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_I2C_Init+0x278>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e006      	b.n	8001f3e <HAL_I2C_Init+0x92>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a7d      	ldr	r2, [pc, #500]	; (8002128 <HAL_I2C_Init+0x27c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0e7      	b.n	8002116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a78      	ldr	r2, [pc, #480]	; (800212c <HAL_I2C_Init+0x280>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_I2C_Init+0x274>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d802      	bhi.n	8001f80 <HAL_I2C_Init+0xd4>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	e009      	b.n	8001f94 <HAL_I2C_Init+0xe8>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	4a69      	ldr	r2, [pc, #420]	; (8002130 <HAL_I2C_Init+0x284>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	3301      	adds	r3, #1
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	495c      	ldr	r1, [pc, #368]	; (8002120 <HAL_I2C_Init+0x274>)
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d819      	bhi.n	8001fe8 <HAL_I2C_Init+0x13c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e59      	subs	r1, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc8:	400b      	ands	r3, r1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_I2C_Init+0x138>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e59      	subs	r1, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	e051      	b.n	8002088 <HAL_I2C_Init+0x1dc>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e04f      	b.n	8002088 <HAL_I2C_Init+0x1dc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d111      	bne.n	8002014 <HAL_I2C_Init+0x168>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e58      	subs	r0, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	440b      	add	r3, r1
 8001ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e012      	b.n	800203a <HAL_I2C_Init+0x18e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e58      	subs	r0, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	0099      	lsls	r1, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	fbb0 f3f3 	udiv	r3, r0, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Init+0x196>
 800203e:	2301      	movs	r3, #1
 8002040:	e022      	b.n	8002088 <HAL_I2C_Init+0x1dc>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10e      	bne.n	8002068 <HAL_I2C_Init+0x1bc>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1e58      	subs	r0, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	440b      	add	r3, r1
 8002058:	fbb0 f3f3 	udiv	r3, r0, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002066:	e00f      	b.n	8002088 <HAL_I2C_Init+0x1dc>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	6809      	ldr	r1, [r1, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6911      	ldr	r1, [r2, #16]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68d2      	ldr	r2, [r2, #12]
 80020c2:	4311      	orrs	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	000186a0 	.word	0x000186a0
 8002124:	001e847f 	.word	0x001e847f
 8002128:	003d08ff 	.word	0x003d08ff
 800212c:	431bde83 	.word	0x431bde83
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	460b      	mov	r3, r1
 8002142:	817b      	strh	r3, [r7, #10]
 8002144:	4613      	mov	r3, r2
 8002146:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff fb9a 	bl	8001880 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	f040 80e0 	bne.w	800231c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2319      	movs	r3, #25
 8002162:	2201      	movs	r2, #1
 8002164:	4970      	ldr	r1, [pc, #448]	; (8002328 <HAL_I2C_Master_Transmit+0x1f4>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fc58 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e0d3      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x50>
 8002180:	2302      	movs	r3, #2
 8002182:	e0cc      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d007      	beq.n	80021aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2221      	movs	r2, #33	; 0x21
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2210      	movs	r2, #16
 80021c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	893a      	ldrh	r2, [r7, #8]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_I2C_Master_Transmit+0x1f8>)
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021ec:	8979      	ldrh	r1, [r7, #10]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fac2 	bl	800277c <I2C_MasterRequestWrite>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08d      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002218:	e066      	b.n	80022e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fcd2 	bl	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b04      	cmp	r3, #4
 8002230:	d107      	bne.n	8002242 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06b      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d11b      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x188>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d017      	beq.n	80022bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	6a39      	ldr	r1, [r7, #32]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fcc2 	bl	8002c4a <I2C_WaitOnBTFFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00d      	beq.n	80022e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d107      	bne.n	80022e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01a      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d194      	bne.n	800221a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	00100002 	.word	0x00100002
 800232c:	ffff0000 	.word	0xffff0000

08002330 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fa9c 	bl	8001880 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 820b 	bne.w	800276e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	497c      	ldr	r1, [pc, #496]	; (8002554 <HAL_I2C_Master_Receive+0x224>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fb5a 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e1fe      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Receive+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e1f7      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2222      	movs	r2, #34	; 0x22
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a5c      	ldr	r2, [pc, #368]	; (8002558 <HAL_I2C_Master_Receive+0x228>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa46 	bl	8002880 <I2C_MasterRequestRead>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1b8      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e18c      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	2b01      	cmp	r3, #1
 8002434:	d11b      	bne.n	800246e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e16c      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b02      	cmp	r3, #2
 8002474:	d11b      	bne.n	80024ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002484:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	e14c      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024d4:	e138      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b03      	cmp	r3, #3
 80024dc:	f200 80f1 	bhi.w	80026c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d123      	bne.n	8002530 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fbed 	bl	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e139      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800252e:	e10b      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b02      	cmp	r3, #2
 8002536:	d14e      	bne.n	80025d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	4906      	ldr	r1, [pc, #24]	; (800255c <HAL_I2C_Master_Receive+0x22c>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa6a 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e10e      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
 8002552:	bf00      	nop
 8002554:	00100002 	.word	0x00100002
 8002558:	ffff0000 	.word	0xffff0000
 800255c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d4:	e0b8      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	2200      	movs	r2, #0
 80025de:	4966      	ldr	r1, [pc, #408]	; (8002778 <HAL_I2C_Master_Receive+0x448>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fa1b 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0bf      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	2200      	movs	r2, #0
 800263a:	494f      	ldr	r1, [pc, #316]	; (8002778 <HAL_I2C_Master_Receive+0x448>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f9ed 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e091      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026c0:	e042      	b.n	8002748 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fb00 	bl	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e04c      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d118      	bne.n	8002748 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f aec2 	bne.w	80024d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	00010004 	.word	0x00010004

0800277c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	460b      	mov	r3, r1
 800278a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d006      	beq.n	80027a6 <I2C_MasterRequestWrite+0x2a>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d003      	beq.n	80027a6 <I2C_MasterRequestWrite+0x2a>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00b      	b.n	80027d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	2b12      	cmp	r3, #18
 80027be:	d107      	bne.n	80027d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f91d 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f6:	d103      	bne.n	8002800 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e035      	b.n	8002870 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280c:	d108      	bne.n	8002820 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	e01b      	b.n	8002858 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002820:	897b      	ldrh	r3, [r7, #10]
 8002822:	11db      	asrs	r3, r3, #7
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f063 030f 	orn	r3, r3, #15
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <I2C_MasterRequestWrite+0xfc>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f943 	bl	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e010      	b.n	8002870 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <I2C_MasterRequestWrite+0x100>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f933 	bl	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00010008 	.word	0x00010008
 800287c:	00010002 	.word	0x00010002

08002880 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d006      	beq.n	80028ba <I2C_MasterRequestRead+0x3a>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d003      	beq.n	80028ba <I2C_MasterRequestRead+0x3a>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b8:	d108      	bne.n	80028cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00b      	b.n	80028e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b11      	cmp	r3, #17
 80028d2:	d107      	bne.n	80028e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f893 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290a:	d103      	bne.n	8002914 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e079      	b.n	8002a0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002920:	d108      	bne.n	8002934 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	e05f      	b.n	80029f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	11db      	asrs	r3, r3, #7
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0306 	and.w	r3, r3, #6
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f063 030f 	orn	r3, r3, #15
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4930      	ldr	r1, [pc, #192]	; (8002a14 <I2C_MasterRequestRead+0x194>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8b9 	bl	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e054      	b.n	8002a0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4929      	ldr	r1, [pc, #164]	; (8002a18 <I2C_MasterRequestRead+0x198>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f8a9 	bl	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e044      	b.n	8002a0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f831 	bl	8002a1c <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e017      	b.n	8002a0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	11db      	asrs	r3, r3, #7
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0306 	and.w	r3, r3, #6
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f063 030e 	orn	r3, r3, #14
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <I2C_MasterRequestRead+0x198>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f865 	bl	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	00010008 	.word	0x00010008
 8002a18:	00010002 	.word	0x00010002

08002a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2c:	e025      	b.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d021      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe ff23 	bl	8001880 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e023      	b.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10d      	bne.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	e00c      	b.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d0b6      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad8:	e051      	b.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d123      	bne.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0204 	orr.w	r2, r3, #4
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e046      	b.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d021      	beq.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe fea1 	bl	8001880 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e020      	b.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10c      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e00b      	b.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d18d      	bne.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd4:	e02d      	b.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f8ce 	bl	8002d78 <I2C_IsAcknowledgeFailed>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e02d      	b.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d021      	beq.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7fe fe47 	bl	8001880 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f043 0220 	orr.w	r2, r3, #32
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e007      	b.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d1ca      	bne.n	8002bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c56:	e02d      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f88d 	bl	8002d78 <I2C_IsAcknowledgeFailed>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e02d      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d021      	beq.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fe06 	bl	8001880 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d1ca      	bne.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cd8:	e042      	b.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d119      	bne.n	8002d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e029      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1c:	f7fe fdb0 	bl	8001880 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e007      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d1b5      	bne.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d11b      	bne.n	8002dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_UART_MspInit+0x9c>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002e46:	2307      	movs	r3, #7
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <HAL_UART_MspInit+0xa0>)
 8002e52:	f7fe fe33 	bl	8001abc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4804      	ldr	r0, [pc, #16]	; (8002e78 <HAL_UART_MspInit+0xa0>)
 8002e68:	f7fe fe28 	bl	8001abc <HAL_GPIO_Init>
}
 8002e6c:	bf00      	nop
 8002e6e:	3728      	adds	r7, #40	; 0x28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020c00 	.word	0x40020c00

08002e7c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fce2 	bl	8001880 <HAL_GetTick>
 8002ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ebe:	e009      	b.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec0:	f7fe fcde 	bl	8001880 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d901      	bls.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e01f      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7fe fcca 	bl	8001880 <HAL_GetTick>
 8002eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eee:	e009      	b.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef0:	f7fe fcc6 	bl	8001880 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	d901      	bls.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e007      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f10:	d1ee      	bne.n	8002ef0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	420e0040 	.word	0x420e0040
 8002f24:	40007000 	.word	0x40007000
 8002f28:	420e0044 	.word	0x420e0044

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e267      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d075      	beq.n	8003036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d112      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05b      	beq.n	8003034 <HAL_RCC_OscConfig+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d157      	bne.n	8003034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e242      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x74>
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01d      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6c      	ldr	r2, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a68      	ldr	r2, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a65      	ldr	r2, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fc4c 	bl	8001880 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fc48 	bl	8001880 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e207      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xc0>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fc38 	bl	8001880 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe fc34 	bl	8001880 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1f3      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0xe8>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c7      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fbed 	bl	8001880 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe fbe9 	bl	8001880 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1a8      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fbcc 	bl	8001880 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe fbc8 	bl	8001880 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e187      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fbac 	bl	8001880 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe fba8 	bl	8001880 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e167      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x200>
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fe fb95 	bl	8001880 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe fb91 	bl	8001880 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e150      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ea      	bne.n	800315a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8097 	beq.w	80032c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a7c      	ldr	r2, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b77      	ldr	r3, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a73      	ldr	r2, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fb51 	bl	8001880 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fb4d 	bl	8001880 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e10c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x2ea>
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x30c>
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b5c      	ldr	r3, [pc, #368]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fb12 	bl	8001880 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe fb0e 	bl	8001880 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0cb      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe fafc 	bl	8001880 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe faf8 	bl	8001880 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0b5      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a1 	beq.w	800340c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d05c      	beq.n	8003390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d141      	bne.n	8003362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe facc 	bl	8001880 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fac8 	bl	8001880 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e087      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	491b      	ldr	r1, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe faa1 	bl	8001880 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe fa9d 	bl	8001880 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x416>
 8003360:	e054      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fa8a 	bl	8001880 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fa86 	bl	8001880 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e045      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e038      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x4ec>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d121      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cc      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90c      	bls.n	8003458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b65      	ldr	r3, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d044      	beq.n	800353c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d003      	beq.n	80034da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e067      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4934      	ldr	r1, [pc, #208]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800350c:	f7fe f9b8 	bl	8001880 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe f9b4 	bl	8001880 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e04f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20c      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe f918 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08004538 	.word	0x08004538
 80035e0:	20000034 	.word	0x20000034
 80035e4:	20000038 	.word	0x20000038

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b094      	sub	sp, #80	; 0x50
 80035ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	647b      	str	r3, [r7, #68]	; 0x44
 80035f4:	2300      	movs	r3, #0
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003600:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 800360c:	2b08      	cmp	r3, #8
 800360e:	f200 80e1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x34>
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x3a>
 800361a:	e0db      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b73      	ldr	r3, [pc, #460]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003620:	e0db      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003622:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003626:	e0d8      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
 8003648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4651      	mov	r1, sl
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4651      	mov	r1, sl
 800369c:	ebb2 0801 	subs.w	r8, r2, r1
 80036a0:	4659      	mov	r1, fp
 80036a2:	eb63 0901 	sbc.w	r9, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb18 0303 	adds.w	r3, r8, r3
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb49 0303 	adc.w	r3, r9, r3
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036da:	4629      	mov	r1, r5
 80036dc:	024b      	lsls	r3, r1, #9
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036e4:	4621      	mov	r1, r4
 80036e6:	024a      	lsls	r2, r1, #9
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f8:	f7fd f970 	bl	80009dc <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003704:	e058      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	4618      	mov	r0, r3
 8003710:	4611      	mov	r1, r2
 8003712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
 800371c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	0159      	lsls	r1, r3, #5
 800372e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003732:	0150      	lsls	r0, r2, #5
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4641      	mov	r1, r8
 800373a:	ebb2 0a01 	subs.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb63 0b01 	sbc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003758:	ebb2 040a 	subs.w	r4, r2, sl
 800375c:	eb63 050b 	sbc.w	r5, r3, fp
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	464b      	mov	r3, r9
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	61fa      	str	r2, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	f7fd f916 	bl	80009dc <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3750      	adds	r7, #80	; 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000034 	.word	0x20000034

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08004548 	.word	0x08004548

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	08004548 	.word	0x08004548

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e03f      	b.n	80038ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff faa8 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f929 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d17c      	bne.n	8003a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x2c>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e075      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x3e>
 8003930:	2302      	movs	r3, #2
 8003932:	e06e      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394a:	f7fd ff99 	bl	8001880 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x82>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003988:	e02a      	b.n	80039e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f840 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e036      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3302      	adds	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e007      	b.n	80039d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1cf      	bne.n	800398a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f810 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b090      	sub	sp, #64	; 0x40
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2a:	e050      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d04c      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3a:	f7fd ff21 	bl	8001880 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d241      	bcs.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9e:	623a      	str	r2, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e00f      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d09f      	beq.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3740      	adds	r7, #64	; 0x40
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b0c0      	sub	sp, #256	; 0x100
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	ea40 0301 	orr.w	r3, r0, r1
 8003b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <UART_SetConfig+0xa0>
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d104      	bne.n	8003ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff fe4c 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba0:	e003      	b.n	8003baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba2:	f7ff fe33 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8003ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 810c 	bne.w	8003dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bda:	4621      	mov	r1, r4
 8003bdc:	eb12 0801 	adds.w	r8, r2, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb43 0901 	adc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb49 0303 	adc.w	r3, r9, r3
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c26:	460b      	mov	r3, r1
 8003c28:	18db      	adds	r3, r3, r3
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	eb42 0303 	adc.w	r3, r2, r3
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c3c:	f7fc fece 	bl	80009dc <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c70:	4641      	mov	r1, r8
 8003c72:	eb12 0a01 	adds.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	4692      	mov	sl, r2
 8003c92:	469b      	mov	fp, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cd2:	f7fc fe83 	bl	80009dc <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cde:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d8e:	f7fc fe25 	bl	80009dc <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc0:	e105      	b.n	8003fce <UART_SetConfig+0x4d6>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003de2:	4642      	mov	r2, r8
 8003de4:	464b      	mov	r3, r9
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	6239      	str	r1, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	4641      	mov	r1, r8
 8003df4:	1854      	adds	r4, r2, r1
 8003df6:	4649      	mov	r1, r9
 8003df8:	eb43 0501 	adc.w	r5, r3, r1
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	00eb      	lsls	r3, r5, #3
 8003e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0a:	00e2      	lsls	r2, r4, #3
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	18e3      	adds	r3, r4, r3
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e18:	464b      	mov	r3, r9
 8003e1a:	eb45 0303 	adc.w	r3, r5, r3
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e3e:	4629      	mov	r1, r5
 8003e40:	008b      	lsls	r3, r1, #2
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e48:	4621      	mov	r1, r4
 8003e4a:	008a      	lsls	r2, r1, #2
 8003e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e50:	f7fc fdc4 	bl	80009dc <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	61b9      	str	r1, [r7, #24]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6139      	str	r1, [r7, #16]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb8:	464b      	mov	r3, r9
 8003eba:	460a      	mov	r2, r1
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003edc:	4649      	mov	r1, r9
 8003ede:	008b      	lsls	r3, r1, #2
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	008a      	lsls	r2, r1, #2
 8003eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eee:	f7fc fd75 	bl	80009dc <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	441c      	add	r4, r3
 8003f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f20:	677a      	str	r2, [r7, #116]	; 0x74
 8003f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f26:	4642      	mov	r2, r8
 8003f28:	464b      	mov	r3, r9
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f36:	4641      	mov	r1, r8
 8003f38:	1851      	adds	r1, r2, r1
 8003f3a:	6039      	str	r1, [r7, #0]
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	414b      	adcs	r3, r1
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f4e:	4659      	mov	r1, fp
 8003f50:	00cb      	lsls	r3, r1, #3
 8003f52:	4651      	mov	r1, sl
 8003f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f58:	4651      	mov	r1, sl
 8003f5a:	00ca      	lsls	r2, r1, #3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	4642      	mov	r2, r8
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	4641      	mov	r1, r8
 8003f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f94:	4641      	mov	r1, r8
 8003f96:	008a      	lsls	r2, r1, #2
 8003f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f9c:	f7fc fd1e 	bl	80009dc <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4422      	add	r2, r4
 8003fcc:	609a      	str	r2, [r3, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fda:	bf00      	nop
 8003fdc:	51eb851f 	.word	0x51eb851f

08003fe0 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */

int main(void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	 handled in milliseconds basis.
	 - Low Level Initialization
	 */

	/* Initialize HAL */
	HAL_Init();
 8003fe4:	f7fd fbec 	bl	80017c0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003fe8:	f000 f89c 	bl	8004124 <SystemClock_Config>

	/* Initialize BSP Led for LED1,LED2,LED3 */
	BSP_LED_Init(LED1);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fd fa79 	bl	80014e4 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fd fa76 	bl	80014e4 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f7fd fa73 	bl	80014e4 <BSP_LED_Init>

	/* Initialize delay for LED2 */
	delayInit(&delay_LED3, DELAY_LED3_DURATION);
 8003ffe:	21c8      	movs	r1, #200	; 0xc8
 8004000:	483b      	ldr	r0, [pc, #236]	; (80040f0 <main+0x110>)
 8004002:	f7fc ff0f 	bl	8000e24 <delayInit>




	if(uartinit()){
 8004006:	f7fd f9d3 	bl	80013b0 <uartinit>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <main+0x3c>
		uartsendString((uint8_t *)UART_CONFIG_OK);
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <main+0x114>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fd fa35 	bl	8001484 <uartsendString>
 800401a:	e001      	b.n	8004020 <main+0x40>
	}else{
		/* Initialization Error */
		Error_Handler();
 800401c:	f000 f8e4 	bl	80041e8 <Error_Handler>
	}

	if(i2c_init()){
 8004020:	f7fd f8ba 	bl	8001198 <i2c_init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <main+0x56>
		uartsendString((uint8_t *)I2C_CONFIG_OK);
 800402a:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <main+0x118>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fa28 	bl	8001484 <uartsendString>
 8004034:	e001      	b.n	800403a <main+0x5a>
	}else{
		/* Initialization Error */
		Error_Handler();
 8004036:	f000 f8d7 	bl	80041e8 <Error_Handler>
	}

	/* Infinite loop */
	while (1) {
		debounceFSM_update();
 800403a:	f7fc fe65 	bl	8000d08 <debounceFSM_update>
		my_alarm = alarmTH_FSM_update();
 800403e:	f7fd f8d5 	bl	80011ec <alarmTH_FSM_update>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <main+0x11c>)
 8004048:	701a      	strb	r2, [r3, #0]
		if(TH_updated(&my_temp, &my_hum)){
 800404a:	492d      	ldr	r1, [pc, #180]	; (8004100 <main+0x120>)
 800404c:	482d      	ldr	r0, [pc, #180]	; (8004104 <main+0x124>)
 800404e:	f7fd f92f 	bl	80012b0 <TH_updated>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <main+0x84>
			//Usar concat string
			uartsendString((uint8_t *)"Current Temperature: XX C \n\r");
 8004058:	482b      	ldr	r0, [pc, #172]	; (8004108 <main+0x128>)
 800405a:	f7fd fa13 	bl	8001484 <uartsendString>
			uartsendString((uint8_t *)"Current Humidity: XX % \n\r");
 800405e:	482b      	ldr	r0, [pc, #172]	; (800410c <main+0x12c>)
 8004060:	f7fd fa10 	bl	8001484 <uartsendString>
		}

		if(my_alarm == NO_ALARM_){
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <main+0x11c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <main+0x94>
			BSP_LED_Off(LED3);
 800406c:	2002      	movs	r0, #2
 800406e:	f7fd faa3 	bl	80015b8 <BSP_LED_Off>
 8004072:	e008      	b.n	8004086 <main+0xa6>
		}else{
			if (delayRead(&delay_LED3)) {
 8004074:	481e      	ldr	r0, [pc, #120]	; (80040f0 <main+0x110>)
 8004076:	f7fc fef1 	bl	8000e5c <delayRead>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <main+0xa6>
				BSP_LED_Toggle(LED3);
 8004080:	2002      	movs	r0, #2
 8004082:	f7fd fab3 	bl	80015ec <BSP_LED_Toggle>
			}
		}

		if(my_alarm != my_old_alarm){
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <main+0x11c>)
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <main+0x130>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d02a      	beq.n	80040e8 <main+0x108>
			my_old_alarm = my_alarm;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <main+0x11c>)
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <main+0x130>)
 8004098:	701a      	strb	r2, [r3, #0]
			switch (my_alarm) {
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <main+0x11c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d824      	bhi.n	80040ec <main+0x10c>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <main+0xc8>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c5 	.word	0x080040c5
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	080040dd 	.word	0x080040dd
				case NO_ALARM_:
					uartsendString((uint8_t *)I2C_RESET_ALARM);
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <main+0x134>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd f9e1 	bl	8001484 <uartsendString>
					break;
 80040c2:	e014      	b.n	80040ee <main+0x10e>
				case MAX_TEMP_ABS_:
					uartsendString((uint8_t *)I2C_MAX_TEMP_ABS_ALARM);
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <main+0x138>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd f9db 	bl	8001484 <uartsendString>
					break;
 80040ce:	e00e      	b.n	80040ee <main+0x10e>
				case MAX_TEMP_DIFF_:
					uartsendString((uint8_t *)I2C_MAX_TEMP_DIFF_ALARM);
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <main+0x13c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fd f9d5 	bl	8001484 <uartsendString>
					break;
 80040da:	e008      	b.n	80040ee <main+0x10e>
				case MAX_HUM_DIFF_:
					uartsendString((uint8_t *)I2C_MAX_HUM_DIFF_ALARM);
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <main+0x140>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd f9cf 	bl	8001484 <uartsendString>
					break;
 80040e6:	e002      	b.n	80040ee <main+0x10e>
				default:
					break;
			}
		}
 80040e8:	bf00      	nop
 80040ea:	e7a6      	b.n	800403a <main+0x5a>
					break;
 80040ec:	bf00      	nop
		debounceFSM_update();
 80040ee:	e7a4      	b.n	800403a <main+0x5a>
 80040f0:	200001b0 	.word	0x200001b0
 80040f4:	20000040 	.word	0x20000040
 80040f8:	20000044 	.word	0x20000044
 80040fc:	200001bc 	.word	0x200001bc
 8004100:	200001c4 	.word	0x200001c4
 8004104:	200001c0 	.word	0x200001c0
 8004108:	080044f4 	.word	0x080044f4
 800410c:	08004514 	.word	0x08004514
 8004110:	200001bd 	.word	0x200001bd
 8004114:	20000048 	.word	0x20000048
 8004118:	2000004c 	.word	0x2000004c
 800411c:	20000050 	.word	0x20000050
 8004120:	20000054 	.word	0x20000054

08004124 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b094      	sub	sp, #80	; 0x50
 8004128:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <SystemClock_Config+0xbc>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <SystemClock_Config+0xbc>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <SystemClock_Config+0xbc>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <SystemClock_Config+0xc0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <SystemClock_Config+0xc0>)
 8004150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <SystemClock_Config+0xc0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004162:	2301      	movs	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004166:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800416a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800416c:	2302      	movs	r3, #2
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004176:	2308      	movs	r3, #8
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800417a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004180:	2302      	movs	r3, #2
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004184:	2307      	movs	r3, #7
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004188:	f107 030c 	add.w	r3, r7, #12
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fecd 	bl	8002f2c <HAL_RCC_OscConfig>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8004198:	f000 f826 	bl	80041e8 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800419c:	f7fe fe76 	bl	8002e8c <HAL_PWREx_EnableOverDrive>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 80041a6:	f000 f81f 	bl	80041e8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80041aa:	230f      	movs	r3, #15
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ae:	2302      	movs	r3, #2
 80041b0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041b2:	2300      	movs	r3, #0
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80041b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80041c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041c6:	2105      	movs	r1, #5
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff f927 	bl	800341c <HAL_RCC_ClockConfig>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 80041d4:	f000 f808 	bl	80041e8 <Error_Handler>
	}
}
 80041d8:	bf00      	nop
 80041da:	3750      	adds	r7, #80	; 0x50
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000

080041e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f7fd f9c9 	bl	8001584 <BSP_LED_On>
	while (1) {
 80041f2:	e7fe      	b.n	80041f2 <Error_Handler+0xa>

080041f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80041f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800422c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041fa:	e003      	b.n	8004204 <LoopCopyDataInit>

080041fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004202:	3104      	adds	r1, #4

08004204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004204:	480b      	ldr	r0, [pc, #44]	; (8004234 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800420a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800420c:	d3f6      	bcc.n	80041fc <CopyDataInit>
  ldr  r2, =_sbss
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004210:	e002      	b.n	8004218 <LoopFillZerobss>

08004212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004214:	f842 3b04 	str.w	r3, [r2], #4

08004218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800421a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800421c:	d3f9      	bcc.n	8004212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800421e:	f7fd fa6b 	bl	80016f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004222:	f000 f811 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004226:	f7ff fedb 	bl	8003fe0 <main>
  bx  lr    
 800422a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800422c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004230:	08004560 	.word	0x08004560
  ldr  r0, =_sdata
 8004234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004238:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 800423c:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8004240:	200001c8 	.word	0x200001c8

08004244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004244:	e7fe      	b.n	8004244 <ADC_IRQHandler>
	...

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4d0d      	ldr	r5, [pc, #52]	; (8004280 <__libc_init_array+0x38>)
 800424c:	4c0d      	ldr	r4, [pc, #52]	; (8004284 <__libc_init_array+0x3c>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	2600      	movs	r6, #0
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	4d0b      	ldr	r5, [pc, #44]	; (8004288 <__libc_init_array+0x40>)
 800425a:	4c0c      	ldr	r4, [pc, #48]	; (800428c <__libc_init_array+0x44>)
 800425c:	f000 f820 	bl	80042a0 <_init>
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	2600      	movs	r6, #0
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	08004558 	.word	0x08004558
 8004284:	08004558 	.word	0x08004558
 8004288:	08004558 	.word	0x08004558
 800428c:	0800455c 	.word	0x0800455c

08004290 <memset>:
 8004290:	4402      	add	r2, r0
 8004292:	4603      	mov	r3, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr
